dnl Process this file with autoconf to produce a configure script.
AC_INIT(native/hdflib/hdfImp.c)
AC_CONFIG_AUX_DIR(./Config)

echo
echo "Configuring to build the Java HDF API and JHV browser."
echo
echo "This configuration needs to find three important items:"
echo
echo "   1.  The HDF library and include files"
echo "   2.  The Java Development Kit JDK 1.1.x"
echo "   3.  Where to install HDF Java.  (This might not be"
echo "       the same location as the regular HDF library.)"
echo
echo "This is a relatively complex configuration procedure."
echo "It would be advisable to check the results of the configure"
echo "program to make sure that the Makefiles are correct."
echo
echo "(Press <return> to continue)"
read ANY


HERE=`pwd`

FOUND_HDF=1;
AC_CACHE_CHECK("HDF library",ac_cv_lib_HDF,FOUND_HDF=0)
AC_CACHE_CHECK("HDF library headers",ac_cv_lib_HDFINC,FOUND_HDF=0)
if test $FOUND_HDF -eq 1 ; then
	HDFLIB=$ac_cv_lib_HDF
	HDFINC=$ac_cv_lib_HDFINC
	FOUND_HDF=1
fi

until test $FOUND_HDF -eq 1  ; do
echo "looking for HDF library"
AC_PATH_PROG(HDFL,libdf.a,,$HERE/../NewHDF/lib:$HERE/lib:/usr/lib:/usr/local/lib,)
while test -z "$HDFL" ; do
	/bin/echo $ac_n "Please enter the path for the HDF libraries (e.g., /usr/local): "
	read HL
	if test \( ! -z "$HL" \) ; then
		HDFL=$HL/lib/libdf.a
	fi
done
if test -f "$HDFL" ; then
	HDFLIB=`dirname $HDFL`
	HL=`dirname $HDFLIB`
	HDFINC=$HL/include
	FOUND_HDFINC=0;
	while test \( ! -f $HDFINC/hdf.h \) ; do
		echo "Cannot find hdf.h in " $HDFINC
		HDFINC=""
		while test -z "$HDFINC" ; do
			/bin/echo $ac_n "Please enter the path for the HDF include files (e.g., /usr/local/include): "
			read HI
			if test \( ! -z "$HI" \) ; then
				HDFINC=$HI
			fi
		done
	done
	FOUND_HDF=1	
else
	echo $HDFL " is not a file:  the HDF path is probably incorrect"
	echo $ac_n "Enter a new path? (y/n)[y]"?
	read ANS
	if test $ANS != "y" ; then
		exit 0
	fi
	HDFL=""
fi
done
echo "Using HDF from "$HDFLIB", headers from "$HDFINC
ac_cv_lib_HDF=$HDFLIB
ac_cv_lib_HDFINC=$HDFINC


echo "This product requires Java JDK 1.1.x"
JAVABINPATH_FOUND=1
AC_CACHE_CHECK("java",ac_cv_prog_JAVA,JAVABINPATH_FOUND=0)
AC_CACHE_CHECK("javac",ac_cv_prog_JAVAC,JAVABINPATH_FOUND=0)
AC_CACHE_CHECK("javadoc",ac_cv_prog_JAVADOC,JAVABINPATH_FOUND=0)
AC_CACHE_CHECK("javadoc images",ac_cv_prog_JAVADOC_IMAGES,JAVABINPATH_FOUND=0)
AC_CACHE_CHECK("jar",ac_cv_prog_JAR,JAVABINPATH_FOUND=0)
if test $JAVABINPATH_FOUND -eq 1; then
	JAVA=$ac_cv_prog_JAVA;
	JAVAC=$ac_cv_prog_JAVAC;
	JAVADOC=$ac_cv_prog_JAVADOC;
	JAVADOC_IMAGES=$ac_cv_prog_JAVADOC_IMAGES;
	JAR=$ac_cv_prog_JAR;
fi


until test $JAVABINPATH_FOUND -eq 1 ; do
JAVAPATH=""
while test -z "$JAVAPATH" ; do
echo $ac_n "Please type the location of the JDK utilities (javac, java, etc.):"
	read JAVAPATH
done
if test \( ! -x $JAVAPATH/java \) ; then 
	echo $JAVAPATH/java " is not executable"
	continue;
fi
if test \( ! -x $JAVAPATH/javac \) ; then 
	echo $JAVAPATH/javac " is not executable"
	continue;
fi
if test \( ! -x $JAVAPATH/javac \) ; then 
	echo $JAVAPATH/javadoc " is not executable"
	continue;
fi
if test \( ! -x $JAVAPATH/javac \) ; then 
	echo $JAVAPATH/jar " is not executable"
	continue;
fi
JAVA=$JAVAPATH/java
JAVAC=$JAVAPATH/javac
JAVADOC=$JAVAPATH/javadoc
JAVADOC_IMAGES=$JAVAPATH/images
JAR=$JAVAPATH/jar
dnl do the caching...
echo "Using Java binaries from: "$JAVAPATH
ac_cv_prog_JAVA=$JAVA;
ac_cv_prog_JAVAC=$JAVAC;
ac_cv_prog_JAVADOC=$JAVADOC;
ac_cv_prog_JAVADOC_IMAGES=$JAVADOC_IMAGES;
ac_cv_prog_JAR=$JAR;
JAVABINPATH_FOUND=1
done

echo "Checking other java directories..."
JAVALIBPATH_FOUND=1
AC_CACHE_CHECK("java support libraries",ac_cv_lib_JAVALIB,JAVALIBPATH_FOUND=0)
if test $JAVALIBPATH_FOUND -eq 1; then
	JAVALIB=$ac_cv_lib_JAVALIB;
fi
if test $JAVALIBPATH_FOUND -eq 1; then
if test \( ! -d "$JAVALIB" \) ; then
	JAVALIBPATH_FOUND=0
fi
fi

if test $JAVALIBPATH_FOUND = 0; then
	JAVADIR=`dirname $JAVAPATH`
	JAVALIB=$JAVADIR/lib
	if test \( ! -d "$JAVALIB" \) ; then
		JAVALIBPATH_FOUND=0
	fi
fi

until test $JAVALIBPATH_FOUND -eq 1 ; do
JAVALIB=""
while test -z "$JAVALIB" ; do
	echo "Please type the location of the JDK 1.1 Java support libraries (e.g., /usr/java/lib)? "
	read JAVALIB
	if test -d $JAVALIB ; then
		JAVALIBPATH_FOUND=1
	else
		echo $JAVALIB " is not a directory."
		JAVALIB = ""
	fi
done
done
echo "Using Java support libraries from: "$JAVALIB
ac_cv_lib_JAVALIB=$JAVALIB


JAVACLASSES=""
JAVACLASSPATH_FOUND=1
AC_CACHE_CHECK("java classes",ac_cv_lib_JAVACLASSES,JAVACLASSPATH_FOUND=0)
if test $JAVACLASSPATH_FOUND -eq 1; then
	JAVACLASSES=$ac_cv_lib_JAVACLASSES;
fi
if test $JAVACLASSPATH_FOUND -eq 0; then
if test -f $JAVALIB/classes.zip ; then
	JAVACLASSES=$JAVALIB/classes.zip
	JAVACLASSPATH_FOUND=1
elif test -f $JAVALIB/rt.jar ; then
	JAVACLASSES=$JAVALIB/rt.jar
	JAVACLASSPATH_FOUND=1
elif test -d $JAVALIB/classes ; then
	JAVACLASSES=$JAVALIB/classes
	JAVACLASSPATH_FOUND=1
fi
fi
until test $JAVACLASSPATH_FOUND -eq 1 ; do
	JAVACLASSES=""
	while test -z "$JAVACLASSES" ; do
		echo "Please type the CLASSPATH of the JDK 1.1 Java classes "
		echo "(e.g., /usr/java/lib/classes.zip or /usr/java/lib/classes)? "
		read JAVACLASSES
		BNAME=`basename $JAVACLASSES`
		if test $BNAME = "classes.zip" ; then
			if test -f $JAVACLASSES ; then
				JAVACLASSPATH_FOUND=1
			fi
		elif test $BNAME = "classes" ; then
			if test -d $JAVACLASSES ; then
				JAVACLASSPATH_FOUND=1
			fi
		fi
	done 
done
CLASSPATH="$JAVACLASSES":"$HERE"


SERVERCLASSES=""

JAVASERVERPATH_FOUND=0
#
# commented out for now -- not advertised in this release
#
# JAVASERVERPATH_FOUND=1
# AC_CACHE_CHECK("java server extension",ac_cv_lib_JAVASERVERPATH,JAVASERVERPATH_FOUND=0)
# if test $JAVASERVERPATH_FOUND -eq 1; then
# 	JAVASERVERPATH=$ac_cv_lib_JAVASERVERPATH;
# 	CLASSPATH="$JAVASERVERPATH":"$CLASSPATH"
# 	SERVERCLASSES="ncsa/hdf/server/FileServlet.class ncsa/hdf/server/HDFServer.class "
# 
# fi
# 
# WANT_SERVER=0;
# if test $JAVASERVERPATH_FOUND -ne 1; then
# 	echo "Do you want to use the HDF Java Servelet (requires the Java Server Extension)? [y/n]"
# 	read USE_SERVER
# 	case $USE_SERVER in
# 	"y")
# 		WANT_SERVER=1;;
# 	*)
# 		WANT_SERVER=0;;
# 	esac
# fi
# 
# if test $WANT_SERVER -eq 1; then
# 
# until test $JAVASERVERPATH_FOUND -eq 1 ; do
# 	JAVASERVER=""
# 	while test -z "$JAVASERVER" ; do
# 		echo "Please type the CLASSPATH of the JDK 1.1 Java Server Extension classes "
# 		echo "(e.g., /usr/java/JDSK/classes.zip)? "
# 		read JAVASERVER
# 		BNAME=`basename $JAVASERVER`
# 		if test $BNAME = "classes.zip" ; then
# 			if test -f $JAVASERVER ; then
# 				JAVASERVERPATH_FOUND=1
# 			fi
# 		elif test $BNAME = "classes" ; then
# 			if test -d $JAVASERVER ; then
# 				JAVASERVERPATH_FOUND=1
# 			fi 
# 		fi
# 	done 
# done
# SERVERCLASSES="ncsa/hdf/server/FileServlet.class ncsa/hdf/server/HDFServer.class "
# echo "Adding Java classes from "$JAVASERVER" to CLASSPATH"
# CLASSPATH="$JAVASERVER":"$CLASSPATH";
# ac_cv_lib_JAVASERVERPATH=$JAVASERVER;
# fi
#
#  end of server feature
#

echo "CLASSPATH is "$CLASSPATH



JAVAINC=""
JAVAINCPATH_FOUND=1
AC_CACHE_CHECK("java support library headers",ac_cv_lib_JAVAINC,JAVAINCPATH_FOUND=0)
if test $JAVAINCPATH_FOUND -eq 1; then
	JAVAINC=$ac_cv_lib_JAVAINC;
fi
if test $JAVAINCPATH_FOUND -eq 0; then
	JAVADIR=`dirname $JAVAPATH`
	JAVAINC=$JAVADIR/include
fi
until test -d "$JAVAINC" ; do 
	JAVAINC=""
	while test -z "$JAVAINC" ; do
		echo "Please type the path of the JDK 1.1 include files  (e.g., /usr/java/include) "
		read JAVAINC
	done
done
until test $JAVAINCPATH_FOUND -eq 1 ; do
	if test -f $JAVAINC/jni.h ; then
		JAVAINCPATH_FOUND=1
	else
		"Warning:  "$JAVAINC"/jni.h is not found; this might not be JDK 1.1.x"
		echo "This product requres JDK 1.1"
		echo "Do you want to quit now to check that JDK 1.1 is correctly installed? (y/n)[y]"?
		read ANS
		if test $ANS != "n" ; then
			exit 0
		else
			echo "Proceeding with configuration"
			JAVAINCPATH_FOUND=1
		fi
	fi
done
echo "Using Java support include files from: "$JAVAINC
ac_cv_lib_JAVAINC=$JAVAINC

if test "$prefix" != "NONE" ; then
	JHVINST="$prefix"
else
	JHVINST=""
fi
JHVINST_FOUND=1
if test -z "$JHVINST" ; then
AC_CACHE_CHECK("JHV install directory",ac_cv_lib_JHVINST,JHVINST_FOUND=0)
fi
if test $JHVINST_FOUND -eq 1; then
	if test -z "$JHVINST" ; then
		JHVINST=$ac_cv_lib_JHVINST;
	fi
	if test \( ! -d "$JHVINST" \); then
		JHVINST_FOUND=0
	fi
	if test \( ! -w "$JHVINST" \); then
		echo $JAVINST ": not writable"
		JHVINST_FOUND=0
	fi
fi
until test $JHVINST_FOUND -eq 1; do
	echo "Please type the directory in which to install the JHV"
	read JHVINST
	JHVINST_FOUND=1
	if test \( ! -d "$JHVINST" \); then
		JHVINST_FOUND=0
	fi
	if test \( ! -w "$JHVINST" \); then
		echo $JAVINST ": not writable"
		JHVINST_FOUND=0
	fi
done
echo "Installing JHV in: "$JHVINST
ac_cv_lib_JHVINST=$JHVINST


dnl Checks for programs.
AC_PREFIX_DEFAULT("")
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PATH_PROG(RM,rm,\"\",,)
AC_PATH_PROG(FIND,find,\"\",,)

dnl Checks for libraries.
dnl Replace `main' with a function in -lm:
AC_CHECK_LIB(m, main)
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, main)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_CHECK_FUNCS(gettimeofday)

AC_CANONICAL_SYSTEM
TARGET=$target

PWD=`pwd`

case $target in
*-hpux10*) LD=ld; LDOPT=-b; SLEXT="sl";
EXTRA_CFLAGS=-Ae; COPT=-b;JAVAINC2=$JAVAINC/hp-ux; JAVATARG=PA_RISC ;;
i386-*-solaris2*) LD=$CC; LDOPT=-G; SLEXT="so";
COPT=-G; JAVAINC2=$JAVAINC/solaris; JAVATARG=i386 ;;
*-*-solaris2*) LD=$CC; LDOPT=-G; SLEXT="so";
COPT=-G; JAVAINC2=$JAVAINC/solaris ; JAVATARG=solaris;;
mips*-sgi-irix5*) LD=$CC; LDOPT=-shared; SLEXT="so";
COPT=-shared ; JAVAINC2=$JAVAINC/irix; JAVATARG=irix;;
mips*-sgi-irix6*) LD=$CC; LDOPT=-shared; SLEXT="so";
COPT=-shared ; JAVAINC2=$JAVAINC/irix; JAVATARG=irix;;
*-pc-linux*) LD=$CC; LDOPT=-shared; SLEXT="so";
COPT=-shared ; JAVAINC2=$JAVAINC/genunix; JAVATARG=linux-elf;;
*) LD=$CC; LDOPT=-G; SLEXT="so";
COPT=-shared; JAVAINC2=$JAVAINC/$target; JAVATARG=$TARGET ;;
esac

AC_SUBST(PWD)
AC_SUBST(EXTRA_CFLAGS)
AC_SUBST(LD)
AC_SUBST(LDOPT)
AC_SUBST(SLEXT)
AC_SUBST(COPT)
AC_SUBST(RM)
AC_SUBST(FIND)
AC_SUBST(JAVA)
AC_SUBST(JAVAC)
AC_SUBST(JAVADOC)
AC_SUBST(JAVADOC_IMAGES)
AC_SUBST(JAVAINC)
AC_SUBST(JAVAINC2)
AC_SUBST(JAVALIB)
AC_SUBST(HDFLIB)
AC_SUBST(HDFINC)
AC_SUBST(TARGET)
AC_SUBST(JAVATARG)
AC_SUBST(JAR)
AC_SUBST(CLASSPATH)
AC_SUBST(JHVINST)
AC_SUBST(SERVERCLASSES)
AC_SUBST(JAVASERVERPATH)

AC_SUBST_FILE(VERSION)
VERSION=./VERSION

AC_OUTPUT(Makefile native/Makefile native/hdflib/Makefile bin/jhv)
