****************************** Beta Version *********************************
File Page Buffering(Beta release)
=================================
    This version of the distribution has preliminary support for file page
    buffering. 

*NOTE*: This version is NOT officially supported on all platforms
        and has not been extensively tested. As such it is provided as is.
        It will be supported officially in a later release.

    The file page buffering allows the file to be mapped to user memory on 
    a per page basis i.e a memory pool of the file. With regards to the 
    file system, page sizes can be allocated based on the file system page-size 
    or if the user wants in some multiple of the file system page-size. This 
    allows for fewer pages to be managed along with accommodating the users file 
    usage pattern.

    The current version supports setting the page-size and number of pages
    in the memory pool through user C-routines(Fortran will be added in the
    next release). The default is 8192 bytes for page-size and 1 for number 
    of pages in the pool.

    Two user C-routines are provided: one to set the values for page-size and
    number of pages to cache, and the other to inquire the current values being 
    used for the pagesize and number of pages cached.

    Routines:(The names may change in the future...)
    -------------------------------------------------
    Hmpset(int pagesize, int maxcache, int flags)
    --------------------------------------------
    o  Set the pagesize and maximum number of pages to cache on the next
       open/create of a file. A pagesize that is a power of 2 is recommended.

       The values set here only affect the next open/creation of a file and
       do not change a particular file's paging behaviour after it has been
       opened or created. This maybe changed in a later release.

       Use flags argument of 'MP_PAGEALL' if the whole file is to be cached
       in memory otherwise pass in zero. In this case the value for 'maxcache'
       is ignored. 
 
    Hmpget(int *pagesize, int *maxcache, int flags)
    ----------------------------------------------
    o   This gets the last pagesize and maximum number of pages cached for
        the last open/create of a file. The 'flags' variable is not used.
    
    In this version a new file memory pool is created for every file that is
    created/opened and can not be shared. Future versions will allow sharing 
    of the file memory pool with other threads/processes.

    To enable the creation of a library using page buffering the following 
    section in the makefile fragment($(toplevel)/config/mh-<os>) must be 
    uncommented and set.

    # ------------ Macros for Shared Memory File Buffer Pool(fmpool) ------
    # Uncomment the following lines to enable shared memory file buffer pool
    # version of the HDF core library libdf.a. Please read the
    # documentation before enabling this feature.
    #FMPOOL_FLAGS  = -DHAVE_FMPOOL

    After setting these values you must re-run  the toplevel 'configure' script. 
    Details on running configure can be found in the section
    'General Configuration/Installation - Unix' in the installation file 
    '$(toplevel)/INSTALL'.

    The file page buffering version of libdf.a is automatically tested
    when the regular HDF and netCDF tests are run. The page buffering
    version has been tested only on a few UNIX platforms and is NOT
    available for the Macintosh ,IBM-PC(Windows NT/95) or VMS.

****************************** Beta Version *********************************
