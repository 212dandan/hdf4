/**************************************************************************
File: sd_chunk_examples.c

  Examples for writing/reading SDS with Chunking and Chunking w/ Compression.
   - Sample C-code using SDS chunking routines. 
   - No real error checking is done and the value of 'status' should 
     be checked for proper values.

5 Examples are shown, 1 for 2-D array, 3 for 3-D arrays and
                      1 for 2-D array with compression..

  Example 1. 2-D 9x4 SDS of uint16 with 3x2 chunks
             Write data using SDwritechunk().
             Read data using SDreaddata().

  Example 2. 3-D 2x3x4 SDS of uint16 with 2x3x2 chunks
             Write data using SDwritedata().
             Read data using SDreaddata().

  Example 3. 3-D 2x3x4 SDS of uint16 with 1x1x4 chunks
             Write data using SDwritechunk().
             Read data using SDreaddata().

  Example 4. 3-D 2x3x4 SDS of uint16 with 1x1x4 chunks
             Write data using SDwritedata().
             Read data using SDreadchunk().

  Example 5. 2-D 9x4 SDS of uint16 with 3x2 chunks with GZIP compression.
             Write data using SDwritechunk().
             Read data using SDreaddata().

Author - GeorgeV
Date   - 11/25/96
********************************************************************/

#include "mfhdf.h"

/* arrays holding dim info for datasets */
static int32  d_dims[3]     = {2, 3, 4};  /* data dimensions */
static int32  edge_dims[3]  = {0, 0, 0};  /* edge dims */
static int32  start_dims[3] = {0, 0, 0};  /* starting dims  */

/* data arrays layed out in memory  */

/* used in Example 1 and 5 */
static uint16  u16_2data[9][4] =
{ 
   {11, 21, 31, 41},
   {12, 22, 32, 42},
   {13, 23, 33, 43},
   {14, 24, 34, 44},
   {15, 25, 35, 45},
   {16, 26, 36, 46},
   {17, 27, 37, 47},
   {18, 28, 38, 48},
   {19, 29, 39, 49},
};

/* uint16 3x2 chunk arrays used in example 1 and 5*/
static uint16  chunk1_2u16[6] = {11, 21, 
                                 12, 22, 
                                 13, 23};

static uint16  chunk2_2u16[6] = {31, 41, 
                                 32, 42, 
                                 33, 43};

static uint16  chunk3_2u16[6] = {14, 24, 
                                 15, 25, 
                                 16, 26};

static uint16  chunk4_2u16[6] = {34, 44, 
                                 35, 45, 
                                 36, 46};

static uint16  chunk5_2u16[6] = {17, 27, 
                                 18, 28, 
                                 19, 29};

static uint16  chunk6_2u16[6] = {37, 47, 
                                 38, 48, 
                                 39, 49};


/* uint16 1x1x4 chunk arrays used in example 3 */
static uint16  chunk1_3u16[4] =  { 0, 1, 2, 3};

static uint16  chunk2_3u16[4] =  { 10, 11, 12, 13};

static uint16  chunk3_3u16[4] =  { 20, 21, 22, 23};

static uint16  chunk4_3u16[4] =  { 100, 101, 102, 103};

static uint16  chunk5_3u16[4] =  { 110, 111, 112, 113};

static uint16  chunk6_3u16[4] =  { 120, 121, 122, 123};


/* Used in Examples 2 and 4 */
static uint16  u16_3data[2][3][4] =
{
    {
        { 0, 1, 2, 3},
        { 10, 11, 12, 13},
        { 20, 21, 22, 23}},
    {
        { 100, 101, 102, 103},
        { 110, 111, 112, 113},
        { 120, 121, 122, 123}}};

/*
 * Main routine
 */
int main(int argc, char *argv[])
{
   int32 f1;                    /* file handle */
   int32 sdsid;                 /* SDS handle */
   uint16  inbuf_3u16[2][3][4]; /* Data array read for Example 2 and 3*/
   uint16  inbuf_2u16[5][2];    /* Data array read for Example 1 */
   uint16  ru16_3data[4];       /* whole chunk input buffer */
   uint16  fill_u16 = 0;        /* fill value */
   HDF_CHUNK_DEF chunk_def;     /* Chunk defintion set */ 
   HDF_CHUNK_DEF rchunk_def;    /* Chunk defintion read */ 
   int32   cflags;              /* chunk flags */
   comp_info cinfo;             /* compression info */
   intn status;

   ncopts = NC_VERBOSE;

    /* create file */
    f1 = SDstart("chunk.hdf", DFACC_CREATE);

    /* 
      Example 1. 2-D 9x4 SDS of uint16 with 3x2 chunks
                 Write data using SDwritechunk().
                 Read data using SDreaddata().
    */

    /* create a  9x4 SDS of uint16 in file 1 */
    d_dims[0] = 9;
    d_dims[1] = 4;
    sdsid = SDcreate(f1, "DataSetChunked_1", DFNT_UINT16, 2, d_dims);

    /* set fill value */
    fill_u16 = 0;
    status = SDsetfillvalue(sdsid, (VOIDP) &fill_u16);

    /* Create chunked SDS 
       chunk is 3x2 which will create 6 chunks */
    chunk_def.chunk_lengths[0] = 3;
    chunk_def.chunk_lengths[1] = 2;
    status = SDsetchunk(sdsid, chunk_def, HDF_CHUNK);

    /* Set Chunk cache to hold 3 chunks */
    status = SDsetchunkcache(sdsid, 3, 0);

    /* Write data use SDwritechunk */

    /* Write chunk 1 */
    start_dims[0] = 0;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk1_2u16);

    /* Write chunk 4 */
    start_dims[0] = 1;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk4_2u16);

    /* Write chunk 2 */
    start_dims[0] = 0;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk2_2u16);

    /* Write chunk 5 */
    start_dims[0] = 2;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk5_2u16);

    /* Write chunk 3 */
    start_dims[0] = 1;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk3_2u16);

    /* Write chunk 6 */
    start_dims[0] = 2;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk6_2u16);
 
    /* read a portion of data back in using SDreaddata
       i.e  5x2 subset of the whole array */
    start_dims[0] = 2;
    start_dims[1] = 1;
    edge_dims[0] = 5;
    edge_dims[1] = 2;
    status = SDreaddata(sdsid, start_dims, NULL, edge_dims, (VOIDP) inbuf_2u16);

   /* This 5x2 array should look somethink like this
         {{23, 24, 25, 26, 27},
          {33, 34, 35, 36, 37}}    
    */

    /* Get chunk information */
    status = SDgetchunkinfo(sdsid, &rchunk_def, &cflags);


    /* Close down this SDS*/    
    status = SDendaccess(sdsid);

    /* 
      Example 2. 3-D 2x3x4 SDS of uint16 with 2x3x2 chunks
                 Write data using SDwritedata().
                 Read data using SDreaddata().
    */

    /* create a new 2x3x4 SDS of uint16 in file 1 */
    d_dims[0] = 2;
    d_dims[1] = 3;
    d_dims[2] = 4;
    sdsid = SDcreate(f1, "DataSetChunked_2", DFNT_UINT16, 3, d_dims);

    /* set fill value */
    fill_u16 = 0;
    status = SDsetfillvalue(sdsid, (VOIDP) &fill_u16);

    /* Create chunked SDS
       chunk is 2x3x2 which will create 2 chunks */
    chunk_def.chunk_lengths[0] = 2;
    chunk_def.chunk_lengths[1] = 2;
    chunk_def.chunk_lengths[2] = 3;
    status = SDsetchunk(sdsid, chunk_def, HDF_CHUNK);

    /* Set Chunk cache to hold 2 chunks*/
    status = SDsetchunkcache(sdsid, 2, 0);

    /* Write data using SDwritedata*/
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    edge_dims[0] = 2;
    edge_dims[1] = 3;
    edge_dims[2] = 4;
    status = SDwritedata(sdsid, start_dims, NULL, edge_dims, (VOIDP) u16_3data);

    /* read data back in using SDreaddata*/
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    edge_dims[0] = 2;
    edge_dims[1] = 3;
    edge_dims[2] = 4;
    status = SDreaddata(sdsid, start_dims, NULL, edge_dims, (VOIDP) inbuf_3u16);

    /* Verify the data in inbuf_3u16 against u16_3data[] */

    /* Get chunk information */
    status = SDgetchunkinfo(sdsid, &rchunk_def, &cflags);

    /* Close down this SDS*/    
    status = SDendaccess(sdsid);

    /* 
      Example 3. 3-D 2x3x4 SDS of uint16 with 1x1x4 chunks
                 Write data using SDwritechunk().
                 Read data using SDreaddata().
    */

    /* Now create a new 2x3x4 SDS of uint16 in file 'chunk.hdf' */
    d_dims[0] = 2;
    d_dims[1] = 3;
    d_dims[2] = 4;
    sdsid = SDcreate(f1, "DataSetChunked_3", DFNT_UINT16, 3, d_dims);

    /* set fill value */
    fill_u16 = 0;
    status = SDsetfillvalue(sdsid, (VOIDP) &fill_u16);

    /* Create chunked SDS 
       chunk is 1x1x4 which will create 6 chunks */
    chunk_def.chunk_lengths[0] = 1;
    chunk_def.chunk_lengths[1] = 1;
    chunk_def.chunk_lengths[2] = 4;
    status = SDsetchunk(sdsid, chunk_def, HDF_CHUNK);

    /* Set Chunk cache to hold 4 chunks*/
    status = SDsetchunkcache(sdsid, 4, 0);

    /* Write data use SDwritechunk */

    /* Write chunk 1 */
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk1_3u16);

    /* Write chunk 4 */
    start_dims[0] = 1;
    start_dims[1] = 0;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk4_3u16);

    /* Write chunk 2 */
    start_dims[0] = 0;
    start_dims[1] = 1;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk2_3u16);

    /* Write chunk 5 */
    start_dims[0] = 1;
    start_dims[1] = 1;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk5_3u16);

    /* Write chunk 3 */
    start_dims[0] = 0;
    start_dims[1] = 2;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk3_3u16);

    /* Write chunk 6 */
    start_dims[0] = 1;
    start_dims[1] = 2;
    start_dims[2] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk6_3u16);
 
    /* read data back in using SDreaddata*/
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    edge_dims[0] = 2;
    edge_dims[1] = 3;
    edge_dims[2] = 4;
    status = SDreaddata(sdsid, start_dims, NULL, edge_dims, (VOIDP) inbuf_3u16);

    /* Verify the data in inbuf_3u16 against u16_3data[] */

    /* Close down this SDS*/    
    status = SDendaccess(sdsid);


    /* 
      Example 4. 3-D 2x3x4 SDS of uint16 with 1x1x4 chunks
                 Write data using SDwritedata().
                 Read data using SDreadchunk().
    */

    /* Now create a new 2x3x4 SDS of uint16 in file 'chunk.hdf' */
    d_dims[0] = 2;
    d_dims[1] = 3;
    d_dims[2] = 4;
    sdsid = SDcreate(f1, "DataSetChunked_4", DFNT_UINT16, 3, d_dims);

    /* set fill value */
    fill_u16 = 0;
    status = SDsetfillvalue(sdsid, (VOIDP) &fill_u16);

    /* Create chunked SDS
       chunk is 1x1x4 which will create 6 chunks */
    chunk_def.chunk_lengths[0] = 1;
    chunk_def.chunk_lengths[1] = 1;
    chunk_def.chunk_lengths[2] = 4;
    status = SDsetchunk(sdsid, chunk_def, HDF_CHUNK);

    /* Set Chunk cache to hold 4 chunks */
    status = SDsetchunkcache(sdsid, 4, 0);

    /* Write data using SDwritedata*/
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    edge_dims[0] = 2;
    edge_dims[1] = 3;
    edge_dims[2] = 4;
    status = SDwritedata(sdsid, start_dims, NULL, edge_dims, (VOIDP) u16_3data);

    /* read data back in using SDreadchunk and verify against
       the chunk arrays chunk1_3u16[] ... chunk6_3u16[] */

    /* read chunk 1 */
    start_dims[0] = 0;
    start_dims[1] = 0;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* read chunk 2 */
    start_dims[0] = 0;
    start_dims[1] = 1;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* read chunk 3 */
    start_dims[0] = 0;
    start_dims[1] = 2;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* read chunk 4 */
    start_dims[0] = 1;
    start_dims[1] = 0;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* read chunk 5 */
    start_dims[0] = 1;
    start_dims[1] = 1;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* read chunk 6 */
    start_dims[0] = 1;
    start_dims[1] = 2;
    start_dims[2] = 0;
    status = SDreadchunk(sdsid, start_dims, (VOIDP) ru16_3data);

    /* Close down this SDS*/    
    status = SDendaccess(sdsid);


    /* 
      Example 5. 2-D 9x4 SDS of uint16 with 3x2 chunks with GZIP compression
                 Write data using SDwritechunk().
                 Read data using SDreaddata().
    */

    /* create a  9x4 SDS of uint16 in file 1 */
    d_dims[0] = 9;
    d_dims[1] = 4;
    sdsid = SDcreate(f1, "DataSetChunked_1", DFNT_UINT16, 2, d_dims);

    /* set fill value */
    fill_u16 = 0;
    status = SDsetfillvalue(sdsid, (VOIDP) &fill_u16);

    /* Create chunked SDS 
       chunk is 3x2 which will create 6 chunks 
       Compression set will be GZIP. 
       Note that 'chunk_def' is a union. 
       See the man page 'sd_chunk.3' for more info on the union. */
    chunk_def.comp.chunk_lengths[0] = 3;
    chunk_def.comp.chunk_lengths[1] = 2;
    chunk_def.comp.comp_type = COMP_CODE_DEFLATE; /* GZIP */
    chunk_def.comp.cinfo.deflate.level = 6;       /* Level */

    /* set Chunking with Compression */
    status = SDsetchunk(sdsid, chunk_def, HDF_CHUNK | HDF_COMP);

    /* Set Chunk cache to hold 3 chunks */
    status = SDsetchunkcache(sdsid, 3, 0);

    /* Write data use SDwritechunk 
       NOTE: This is the recommended way when using Compression */

    /* Write chunk 1 */
    start_dims[0] = 0;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk1_2u16);

    /* Write chunk 4 */
    start_dims[0] = 1;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk4_2u16);

    /* Write chunk 2 */
    start_dims[0] = 0;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk2_2u16);

    /* Write chunk 5 */
    start_dims[0] = 2;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk5_2u16);

    /* Write chunk 3 */
    start_dims[0] = 1;
    start_dims[1] = 0;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk3_2u16);

    /* Write chunk 6 */
    start_dims[0] = 2;
    start_dims[1] = 1;
    status = SDwritechunk(sdsid, start_dims, (VOIDP) chunk6_2u16);
 
    /* read a portion of data back in using SDreaddata
       i.e  5x2 subset of the whole array */
    start_dims[0] = 2;
    start_dims[1] = 1;
    edge_dims[0] = 5;
    edge_dims[1] = 2;
    status = SDreaddata(sdsid, start_dims, NULL, edge_dims, (VOIDP) inbuf_2u16);

   /* This 5x2 array should look somethink like this
         {{23, 24, 25, 26, 27},
          {33, 34, 35, 36, 37}}    
    */

    /* Get chunk information */
    status = SDgetchunkinfo(sdsid, &rchunk_def, &cflags);

    /* Close down this SDS*/    
    status = SDendaccess(sdsid);

    /* Close down SDS interface */
    status = SDend(f1);

}
