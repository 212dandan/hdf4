 Annotation access through the Multi-file Annotation Interface(ANxxx)
 ==================================================================== 

 These routines are for accessing file labels, file descriptions, data
labels and data descriptions(i.e. all are annotations). General access
requires the routines Hopen() and ANstart() to be called first and the 
last call to be ANend() and Hclose() which ends annotation handling on the file
and closes the file. Basic annotation manipulation involes dealing
with  handles(ann_id's) foreach annotation and annotation interface 
handle(an_id). 


NOTES: 
  Note that the annotation types are enumerated. 
  TYPE here refers to file/data label/description types 
  They are AN_FILE_LABEL, AN_FILE_DESC, AN_DATA_LABEL, AN_DATA_DESC
  The tag/ref refers to data tag/ref.

  AN_DATA_LABEL = 0, /* Data label */
  AN_DATA_DESC  = 1, /* Data description */
  AN_FILE_LABEL = 2, /* File label */
  AN_FILE_DESC  = 3  /* File description */ 

In C-code you need to declare the annotation type using the 
enumerated type defintion.

e.g. C-code fragment to write a File label

#include "hdf.h"
...
..
char fname[10] = {"ann.hdf"};
char *file_lab[1] = {"File label #1: This is a file label"};

int32   file_id; /* file id */
int32   an_id;   /* annotation interface id */
int32   ann_id;  /* annotation id */
ann_type myanntype;  /* annotation type */

/* Start Annotation inteface and create file */
file_id = Hopen(fname, DFACC_CREATE,0);
an_id = ANstart(file_id);

/* Set annotation type to file label */
myanntype = AN_FILE_LABEL;

/* Create id for file label */
ann_id = ANcreatef(an_id, myanntype);

/* Write file label */
ANwriteann(ann_id, file_lab[0], HDstrlen(file_lab[0]));

/* end access to file label */
ANendaccess(ann_id);

/* end access to file and close it*/
ANend(an_id);
Hclose(file_id);
....
...

NOTE: You could also call ANcreatef() like this 
        ANcreatef(an_handle, AN_FILE_LABEL);
      without using the intermediate variable.

 ROUTINES NEEDED:
================
 Hopen    - Opening the file, returns a file handle
 Hclose   - Close the file.
 
 NEW ROUTINES:
===============
 ANstart     - open file for annotation handling, returns annotation
               interface id
 ANfileinfo  - get number of file/data annotations in file. Indices returned
               are used in ANselect() calls.
 ANend       - end access to annotation handling on file
 ANcreate    - create a new data annotation and return an id(ann_id)
 ANcreatef   - create a new file annotation and return an id(ann_id)
 ANselect    - returns an annotation id(ann_id) from index for 
               a particular annotation TYPE. This id is then used for
               calls like ANwriteann(), ANreadann(), ANannlen(),..etc
 ANnumann:   - return number of annotations that match TYPE/tag/ref
 ANannlist:  - return list of id's(ann_id's) that match TYPE/tag/ref
 ANannlen:   - get length of annotation given id(ann_id)
 ANreadann:  - read annotation given id(ann_id)
 ANwriteann: - write annotation given id(ann_id)
 ANendaccess - end access to annotation using id(ann_id)


Routines:
----------

C:
/* ------------------------------- ANstart -------------------------------- 
 NAME
	ANstart -- open file for annotation handling
 USAGE
	int32 ANstart(file_id)
        int32  file_id;    IN: file id

 RETURNS
        An annotation interface ID or FAIL
 DESCRIPTION
        Start annotation handling on the file and return an interface id.

 
Fortran: afstart(file_id)

/*------------------------------- ANfileinfo ----------------------------
 NAME
    ANfileinfo
 PURPOSE
    Report high-level information about the ANxxx interface for a given file.
 USAGE
    intn ANfileinfo(an_id, n_file_label, n_file_desc, n_data_label, n_data_desc)
        int32 an_id;          IN:  annotation interface ID
        int32 *n_file_label;  OUT: the # of file labels
        int32 *n_file_desc;   OUT: the # of file descriptions
        int32 *n_data_label;  OUT: the # of data labels
        int32 *n_data_desc;   OUT: the # of data descriptions
 RETURNS
    SUCCEED/FAIL
 DESCRIPTION
    Reports general information about the number of file and data
    annotations in the file. This routine is generally used to find
    the range of acceptable indices for ANselect calls.

Fortran: affileinfo(an_id, num_flabel, num_fdesc, num_dlabel, num_ddesc)

/* -------------------------------- ANend ---------------------------------
 NAME
	ANend -- close annotation handling on a file
 USAGE
	int32 ANend(an_id)
        int32 an_id;         IN: annotation interface ID for the file
 RETURNS
        SUCCEED / FAIL
 DESCRIPTION
      Closes annotation handling on the gvien annotation interface id.


Fortran: afend(an_id)

/* ------------------------------ ANcreate ---------------------------- 
 NAME
	ANcreate - create a new data annotation and return an id
 USAGE
	int32 ANcreate(an_id, tag, ref, type )
        int32 an_id;    IN: annotation interface ID
        uint16 tag;     IN: tag of item to be assigned annotation
        uint16 ref;     IN: reference number of itme to be assigned ann
        ann_type  type: IN: AN_DATA_LABEL for data labels, 
                            AN_DATA_DESC for data descriptions,
 RETURNS
        An ID to an annotation which can either be a label or description
 DESCRIPTION
        Creates a data annotation, returns an 'ann_id' to work with the new 
        annotation which can either be a label or description.


Fortran: afcreate(an_id, tag, ref, type)

/* ------------------------------ ANcreatef ---------------------------- 
 NAME
	ANcreatef - create a new file annotation and return an id
 USAGE
	int32 ANcreatef(an_id, type )
        int32 an_id;    IN: annotation interface ID
        ann_type  type: IN:  AN_FILE_LABEL for file labels,
                             AN_FILE_DESC for file descritpions.
 RETURNS
        An ID to an annotation which can either be a file label or description
 DESCRIPTION
        Creates a file annotation, returns an 'ann_id' to work with the new 
        file annotation which can either be a label or description.

Fortran: afcreatef(an_id, type)


/* ------------------------------- ANselect ------------------------------- 
 NAME
	ANselect -- get an annotation ID from index of 'type'
 USAGE
	int32 ANselect(an_id, index, type)
        int32 an_id;    IN: annotation interface ID
        int32 index;    IN: index of annottion to get ID for
        ann_type  type: IN: AN_DATA_LABEL for data labels, 
                            AN_DATA_DESC for data descriptions,
                            AN_FILE_LABEL for file labels,
                            AN_FILE_DESC for file descritpions.
 RETURNS
        An ID to an annotation type which can either be a label or description 
 DESCRIPTION
        The position index is ZERO based

Fortran: afselect(an_id, index, type)


/*------------------------------- ANnumann ---------------------------------
 NAME
   ANnumann -- find number of annotation of 'type' that 
                 match the given element tag/ref 
 USAGE
       intn  ANnumann(an_id, type, elem_tag, elem_ref)
       int32  an_id;     IN: annotation interface ID
       int    type:      IN: AN_DATA_LABEL for data labels, 
                             AN_DATA_DESC for data descriptions,
                             AN_FILE_LABEL for file labels,
                             AN_FILE_DESC for file descritpions.
       uint16 elem_tag,: IN: tag of item of which this is annotation
       uint16 elem_ref;  IN: ref of item of which this is annotation
 RETURNS
       number of annotation found if successful and FAIL (-1) otherwise
 DESCRIPTION
       Find number of annotation of 'type' for the given element 
       tag/ref pair. Here an element is either a file label/desc or
       data label/desc.


Fortran: afnumann(an_id, type, tag, ref)


/*--------------------------------------------------------------------------
 NAME
   ANannlist -- generate list of annotation ids of 'type' that 
                 match the given element tag/ref 
 USAGE
       intn  ANannlist(an_id, type, elm_tag, elem_ref, ann_list[])
       int32  an_id;     IN: annotation interface ID
       ann_type  type:   IN: AN_DATA_LABEL for data labels, 
                             AN_DATA_DESC for data descriptions,
                             AN_FILE_LABEL for file labels,
                             AN_FILE_DESC for file descritpions.
       uint16 elem_tag,: IN: tag of element of which this is annotation
       uint16 elem_ref;  IN: ref of element of which this is annotation
       int32  ann_list[]; OUT: array of ann_id's that match criteria.
 RETURNS
       number of annotations ids found if successful and FAIL (-1) otherwise
 DESCRIPTION
       Find and generate list of annotation ids of 'type' for the given 
       element tag/ref pair


Fortran: afannlist(an_id,type, tag, ref, alist[])



/*--------------------------------------------------------------------------
 NAME
       ANannlen -- get length of annotation givne annotation id
 USAGE
       int32 ANannlen(ann_id)
       int32 ann_id;   IN: annotation id
 RETURNS
       length of annotation if successful and FAIL (-1) otherwise
 DESCRIPTION
       Get the length of the annotation specified.


Fortran: afannlen(ann_id)

/*--------------------------------------------------------------------------
 NAME
       ANwriteann -- write annotation given ann_id
 USAGE
       intn ANwriteann(ann_id, ann, ann_len)
       char *ann_id;   IN: annotation id
       char *ann;      IN: annotation to write
       int32 ann_len;  IN: length of annotation

 RETURNS
       SUCCEED (0) if successful and FAIL (-1) otherwise
 DESCRIPTION
       Checks for pre-existence of given annotation, replacing old one if it
       exists. Writes out annotation.

Fortran: afwriteann(ann_id, ann, annlen)



/*--------------------------------------------------------------------------
 NAME
       ANreadann -- read annotation given ann_id
 USAGE
       intn ANreadann(ann_id, ann, maxlen)
       int32 ann_id;   IN: annotation id (handle)
       char *ann;     OUT: space to return annotation in
       int32 maxlen;   IN: size of space to return annotation in
 RETURNS
       SUCCEED (0) if successful and FAIL (-1) otherwise
 DESCRIPTION
       Gets tag and ref of annotation.  Finds DD for that annotation.
       Reads the annotation, taking care of NULL terminator, if necessary.
       

Fortran: afreadann(ann_id, ann, maxlen)



/* ----------------------------------------------------------------------- 
 NAME
	ANendaccess -- end access to an annotation given it's id
 USAGE
	intn ANendaccess(ann_id)
        int32 an_id;    IN: annotation id
 RETURNS
        SUCCEED or FAIL
 DESCRIPTION
        Terminates access to an annotation. 


Fortran: afendaccess(ann_id)


 



