HDF version 4.2.6-post0 currently under development
===================================================

INTRODUCTION

This document describes the differences between HDF 4.2.6 and HDF 4.2.6-post*.
It is written for people who are familiar with previous releases of HDF 
and wish to migrate to HDF 4.2.6-post*.

The HDF 4.2.6 documentation can be found on the The HDF Group's FTP server:

    ftp://ftp.hdfgroup.org/HDF/Documentation/

First-time HDF users are encouraged to read the HDF FAQ, which can be
reached from the HDF product home page:
  
    http://hdfgroup.org/products/hdf4/

If you have any questions or comments, please see the HDF Support page:

    http://hdfgroup.org/services/support.html

CONTENTS

- New features and changes
  -- Source distribution
  -- Configuration
  -- Library
  -- Utilities
- Support for new platforms and compilers
- Bugs fixed since HDF4.2.6
  -- Utilities
  -- Library
  -- Configuration
- Documentation
- Platforms tested
- Known problems


New features and changes
========================
   Source distribution
   ===================
   - [None.  PPM - YYYY/MM/DD]

   Configuration
   ============= 
   - [None]
     
   Library
   ========= 
   - [None]

   Test
   ====
   - [None]

   Utilities
   ========= 
   - [None]

Support for new platforms and compilers
=======================================
   - [None]

Bugs fixed since HDF4.2.6
=========================
   Utilities
   ========= 
   - [None]

   Library
   ========= 
   - [None]

   Configuration
   =============
   - [None]


Documentation
==============
The updated HDF Reference Manual is now available in HTML format.

Platforms tested
================

This version has been tested in the following platforms:

   Linux 2.6.18-194.3.1.el5 #1   gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)
      SMP i686 i386              G95 (GCC 4.0.3 (g95 0.92!) Jun 24 2009)
   (jam)                         g77 (GCC) 3.4.6 20060404
                                 pgcc and pgf90 10.6-0 32-bit target 
                                 on x86 Linux -tp penryn
                                 Intel(R) C Compiler, Version 11.1
                                 Intel(R) Fortran Compiler, Version 11.1
                                 GNU Fortran (GCC) 4.1.2 20080704
                                 (Red Hat 4.1.2-50)


   Linux 2.6.18-238.9.1.el5 #1  gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)
      SMP x86_64 GNU/Linux       G95 (GCC 4.0.3 (g95 0.93!) Apr 21 2010)
   (koala)                       icc (ICC) 12.0.3 20110309
                                 ifort (IFORT) 12.0.3 20110309
                                 pgcc and pgf90 11.3-0 64-bit target 
                                 on x86-64 Linux -tp nehalem
                                 GNU Fortran (GCC) 4.1.2 20080704 
                                 (Red Hat 4.1.2-50)

   SunOS 5.10 32- and 64-bit     Sun C 5.9 SunOS_sparc Patch 124867-16 
   (linew)                       Sun Fortran 95 8.3 SunOS_sparc 
                                 Patch 127000-13 

   Xeon Linux 2.6.32.24-0.2.1.2230.2.PTF-default
      #1 SMP x86_64              Intel(R) C Compiler Version 11.1.073
      SGI Altix UV               Intel(R) Fortran Compiler Version 11.1.073
   (ember)

   AIX 6.1 (32/64 bit)           IBM XL C/C++ for AIX, V11.1
   (NCSA bp-login)               IBM XL Fortran for AIX, V13.1

   Windows XP                    Visual Studio 2008 w/ Intel Fortran 10.1 (project files)
                                 Visual Studio 2008 w/ Intel Fortran 11.1 (cmake)
                                 Visual Studio 2010 (cmake)
                                 Cygwin(1.7.7 native gcc(4.3.4) compiler and gfortran)

   Windows XP x64                Visual Studio 2008 w/ Intel Fortran 10.1 (project files)
                                 Visual Studio 2008 w/ Intel Fortran 11.1 (cmake)
                                 Visual Studio 2010 (cmake)
                                 Cygwin(1.7.7 native gcc(4.3.4) compiler and gfortran)

   Windows 7                     Visual Studio 2008 w/ Intel Fortran 11.1 (cmake)

   Windows 7 x64                 Visual Studio 2008 w/ Intel Fortran 11.1 (cmake)
                                 
   MAC OS X Intel 10.6.2         Darwin 10.7.0
   (32 bit)                      i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1
   (tejeda)                      GNU Fortran (GCC) 4.4.0 20090123

   MAC OS X Intel 10.6.2         Darwin 10.7.0
   (64 bit)                      Intel C icc (ICC) 12.0 20101110
   (fred)                        Intel Fortran ifort (IFORT) 12.0 20101110 
                                 i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1
                                 GNU Fortran (GCC) 4.6.0
                             

   Debian6.01 2.6.32-5-686 #1 SMP i686 GNU/Linux
                                 gcc (Debian 4.4.5-8) 4.4.5
                                 GNU Fortran (Debian 4.4.5-8) 4.4.5

   Debian6.01 2.6.32-5-amd64 #1 SMP x86_64 GNU/Linux
                                 gcc (Debian 4.4.5-8) 4.4.5
                                 GNU Fortran (Debian 4.4.5-8) 4.4.5

   Fedora14 2.6.35.12-88.fc14.i686.PAE #1 SMP i686 i686 i386 GNU/Linux
                                 gcc (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)
                                 GNU Fortran (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)

   Fedora14 2.6.35.12-88.fc14.x86_64 #1 SMP x86_64 x86_64 x86_64 GNU/Linux
                                 gcc (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)
                                 GNU Fortran (GCC) 4.5.1 20100924 (Red Hat 4.5.1-4)

   SUSE 11.4 2.6.37.1-1.2-desktop #1 SMP PREEMPT i686 i686 i386 GNU/Linux
                                 gcc (SUSE Linux) 4.5.1 20101208
                                 GNU Fortran (SUSE Linux) 4.5.1 20101208

   SUSE 11.4 2.6.37.1-1.2-desktop #1 SMP PREEMPT x86_64 x86_64 x86_64 GNU/Linux
                                 gcc (SUSE Linux) 4.5.1 20101208
                                 GNU Fortran (SUSE Linux) 4.5.1 20101208

   Ubuntu 10.10 2.6.35-28-generic #50-Ubuntu SMP i686 GNU/Linux
                                 gcc (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5
                                 GNU Fortran (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5

   Ubuntu 10.10 2.6.35-28-generic #50-Ubuntu SMP x86_64 GNU/Linux
                                 gcc (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5
                                 GNU Fortran (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5


Known problems
==============

o  Wnen buidling in AIX systems, if CC is xlc with -qlanglvl=ansi, configure
   fails when checking for the jpeglib.h header due to the duplicated
   macro definition of HAVE_STDLIB_H.  This is because some newer builds
   of jpeg library has HAVE_STDLIB_H defined in its jconfig.h header file.
   Without the -qlanglvl=ansi, some older xlc (e.g., V7.0) still fails but
   newer xlc (e.g., V9.0) passes.  AKC - 2010/02/17

o  When building on Linux/UNIX platforms, the szip shared library files must
   be in the system library path. This can be done by adding a link to
   the libsz.* files into the /usr/lib folder or by adding the library
   location to the LD_LIBRARY_PATH environment variable.
      Ex. export LD_LIBRARY_PATH=path_to_szip_lib:$LD_LIBRARY_PATH
   Optionally, one can use the static szip library files by adding '-static'
   to the CFLAGS environment variable.
   
o  Existing data written by an HDF4 Library prior to HDF 4.2r2:
   When a one-dimensional SDS and a dimension scale have
   the same name, subsequent accesses to the dimension scale or to the
   SDS might produce undesired results because the libraries could not
   distinguish between the two objects.  In the case of writing, data
   might even be corrupted.  For example, SDS data might be written to a
   dimension variable or vice versa.

   HDF4 Library Releases 4.2r2 and later make a distinction between an SDS
   and a dimension variable.  However, as older versions, these recent
   versions are unable to detect such conflicts in existing files,
   specifically, those created by earlier releases.  It is therefore STRONGLY
   recommended to check for such name duplication before working with data
   created with a pre-4.2r2 library.

   The functions SDgetnumvars_byname and SDnametoindices are provided
   to help detect such name conflicts and select the correct object to
   access, respectively; see the HDF Reference Manual entries for
   further details.

o  This release does not support VMS systems.

o  N-Bit compression is not supported with Fortran APIs.

o  Using both fill-value and compression on SD datasets does not work.

o  When using PGI compilers, make sure that the JPEG library is also compiled 
   with a PGI C compiler; linking with a JPEG library built with gcc causes 
   JPEG library tests to fail.  To bypass the problem:

       x Set LIBS flag to $PGI_JPEG_INSTALL_DIR/lib/libjpeg.a
         where $PGI_JPEG_INSTALL_DIR points to the installation directory
         for the PGI-compiled JPEG library:

         setenv LIBS $PGI_JPEG_INSTALL_DIR/lib/libjpeg.a

       x Use the --with-jpeg=$PGI_JPEG_INSTALL_DIR configure flag to 
         configure with the PGI-compiled JPEG library:

         ./configure --with-jpeg=$PGI_JPEG_INSTALL_DIR --with-zlib....

o  In order for the API SDgetdatasize to get the correct compressed size
   of the data, the dataset needs to be closed (SDendaccess) or read
   (SDreaddata), after being written and before SDgetdatasize is called.
