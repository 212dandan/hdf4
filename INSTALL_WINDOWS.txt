    Installation instructions for Windows platforms.
    -----------------------------------------------

Install HDF4.2 Release 0 on Windows Windows 2000 and Windows XP

The instructions which follow assume that you will be using one of 
the 'zip' files that we provide, either the binary code release
(HDF42r0.zip) or the source code release (HDF42r0s.zip).

In building HDF from source code you may select between 
two build environment options ( with Fortran or without Fortran).  

The following sections discuss in details installation procedures. 

Preconditions:

* Installed GNU ZLIB, JPEG, and SZIP(optional for building from source) 
  Libraries. You need to download SZIP Library if you use NCSA 
  prebuild binaries.

  ZLIB, JPEG and SZIP libraries for windows can be found on the HDF FTP
  server ftp://hdf.ncsa.uiuc.edu/lib-external/gzip/bin/windows
         ftp://hdf.ncsa.uiuc.edu/lib-external/jpeg/bin/jpeg-6b.exe
         ftp://hdf.ncsa.uiuc.edu/lib-external/szip/bin/windows


Section I. Building from Binary Code Release (HDF42r0.zip)
===============================================
         
To install the HDF and MFHDF libraries and utilities, it is assumed that
you have done the following:
      
   1. Create a directory structure to unpack the library.  For example:

         c:\                           (any drive)
         MyHDFstuff\                   (any folder name)

   2. Copy the binary archive (HDF42r0.zip)to that directory and unpack
      it by running WinZip on HDF42r0.zip (the binary archive).  This
      should create a directory called 'HDF42r0' which contains the
      following files and directories:

         c:\MyHDFstuff\HDF42r0\lib     (Single-threaded static versions
                                        of HDF and MFHDF libraries with
                                        Fortran or no Fortran support)
         c:\MyHDFstuff\HDF42r0\dll     (Multi-threaded DLL export HDF
                                        and MFHDF libraries and DLL
                                        files with Fortran or no
                                        Fortran support)
         c:\MyHDFstuff\HDF42r0\include (include files)
         c:\MyHDFstuff\HDF42r0\bin     (utilities)
         c:\MyHDFstuff\HDF42r0\release_notes         (release notes)
         c:\MyHDFstuff\HDF42r0\INSTALL_WINDOWS.txt   (this file)

   3. If you are building an application that uses the HDF libraries
      the following locations will need to be specified for locating
      header files and linking in the HDF libraries:
 
         c:\MyHDFstuff\HDF42r0\lib or c:\MyHDFstuff\HDF42r0\dll
         c:\MyHDFstuff\HDF42r0\include

      Also you will need to specify location of the header files and
      libraries for ZLIB, JPEG, and SZIP.

Note: The ws2_32.lib needs to linked with your executable if using the
      static mfhdf library.  The ws2_32.lib can be found in your
      Microsoft Visual C++ directory under the lib folder.


Section II. Building from Source Code Release (HDF42r0s.zip)
================================================

STEP I:  Preconditions

To build the HDF and MFHDF libraries ( single-threaded static or
multi-threaded DLL) and utilities, it is assumed that you have done
the following:
      
   1. Installed MicroSoft Developer Studio, and Visual C++ 6.0.  Visual
      Fortran 6.0 is needed if you are going to build the full HDF
      library with Fortran support.  Installed ZLIB, JPEG and SZIP
      libraries.

   2. Set up a directory structure to unpack the library.  For example: 

         c:\                             (any drive)
         MyHDFstuff\                     (any folder name)

   3. Copy the source distribution archive to that directory and unpack
      it using the appropriate archiver options to create a directory
      hierarchy.
         
      Run WinZip on HDF42r0s.zip (the entire source tree).  This should
      create a directory called 'HDF42r0' which contains several files
      and directories.

   4. HDF4 provide options to do in-memory compress within HDF4 library.
      Currently, three external compression libraries ZLIB, JPEG, and
      SZIP can be used with HDF4.

      4.1 HDF4 uses Zlib version 1.1.4 for compression.  To use Zlib
          library, you have to install your own Zlib library or go to
          ftp://hdf.ncsa.uiuc.edu/lib-external/gzip/bin/windows 
          to download the Zlib library.
      
      4.2 HDF4 uses JPEG release 6b for compression.  To use JPEG
          library, you have to install your own JPEG library or go to
          ftp://hdf.ncsa.uiuc.edu/lib-external/jpeg/bin/jpeg-6b.exe
          to download the JPEG library.

      4.3 HDF4 uses Szip version 1.2 for compression. To use Szip
          library, you can download Szlib source codes and binaries
          from ftp://ftp.ncsa.uiuc.edu/HDF/szip/bin/windows.

          Please note that Szip is not a totally open-source free
          software.  For licensing issue of Szip, please check 
          "Licensing terms" at
          http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/index.html.

          Szip compression feature inside HDF4 is optional. 
      
   5. Define the following environment variables: 

         HDF4_EXT_ZLIB
         HDF4_EXT_JPEG
         HDF4_EXT_SZIP
      
      In this section, Szip compression software is assumed to be used.
      Please read section IV as well as this section if you do not
      want to use Szip compression feature inside HDF4.
      
      To define these environment variables:
      
      Click "Start", click "Control Panel", and then double-click
      "System".  On the "Advanced" tab, click "Environment Variables".
      
      If you are logged on as administrator to the local computer AND
      want to let all other users use these two environment variables,
      click "New" under "System Variables" box; otherwise, click "New"
      under "User Variables" box.
      
      In the New Variable window, set "Variable name" as HDF4_EXT_ZLIB
      and "Variable value" as zlib.lib, then click OK.
      
      Similarly, you can set:

      HDF4_EXT_SZIP environment variable as libjpeg.lib
      HDF4_EXT_SZIP environment variable as szlib.lib

Note: You might have to close and reopen running programs for the new
      environment variable settings to take effect. 
      
   6. Set up path for external libraries and headers
 
      Invoke Microsoft Visual C++ and go to "Tools" and select
      "Options", find "Directories";
      
      6.1 Find the box "Show directories for", choose "Include files",
          If you cannot find your Zlib, JPEG, and Szip header path
          (for example, c:\zlib114\include, c:\jpeg-6b, 
          c:\szlib\include) from the directory list, add the header
          path (c:\zlib114\include, c:\jpeg-6b, c:\szlib\include) to
          the included directories.
      
      6.2 Find the box "Show directories for", choose "Library files",
          If you cannot find your Zlib, JPEG, and Szip library path
          (for example, c:\zlib114\lib, c:\jpeg-6b, c:\szlib\lib)
          from the directory list, add the library path
          (c:\zlib114\lib, c:\jpeg-6b, c:\szlib\lib) to the library
          directories.

      
STEP II: Select Installation Type and Build.

You may select one of 2 ways to build the HDF libraries and utilities,
depending on your environment and application needs.

Option I, (select Win32.nofortran.zip)
This is the "NOFORTRAN" configuration : It builds debug and release
single-threaded and multi-threaded DLL versions of the HDF libraries,
tests, and utilities.  There is no Fortran support.

Option II, (select Win32.zip)
This is "WITH FORTRAN support" configuration : it is the same as above
but with Fortran support. 


STEP III: Building the Libraries, Tests and Utilities.

Note that the instructions are the same for both Options I and II. 

   1. Unpack Win32.nofortran.zip or Win32.zip in directory HDF42r0\. 

      Note: Please select "Yes" or "Yes to All" when you are asked
            to confirm file overwrite by WinZip.

   2. Invoke Microsoft Visial C++ 6.0, go to "File" and select the
      "Open Workspace" option. 

      Then open the c:\myHDFstuff\HDF42r0\all.dsw workspace. 

   3. Select "Build", then Select "Set Active Configuration".

      On Windows platform select as the active configuration

         "all -- Win32 Debug" to build debug versions of
                              single-threaded static libraries, tests
                              and utilities and multi-threaded libraries
                              and tests.
         or
 
         "all -- Win32 Release" to build release versions of
                                single-threaded static libraries, tests
                                and utilities and multi-threaded
                                libraries and tests.

      Select "Build" and "Build all.exe" to build the corresponding
      version of the HDF42r0 library.

      You should see 0 error at the end of building.

      Warning messages can be ignored.

      When the debug build is done the directories listed below will
      contain the following files:

         c:\MyHDFstuff\HDF42r0\windows\lib\debug\singlethreaded -

            hd420d.lib - HDF static library 
            hm420d.lib - MFHDF static library

         c:\MyHDFstuff\HDF42r0\windows\lib\debug\multithreaded -

            hd420md.lib - HDF multi-threaded DLL export library 
            hm420md.lib - MFHDF multi-threaded DLL export library 

         c:\MyHDFstuff\HDF42r0\windows\dll\debug

            hd420md.dll - HDF DLL
            hm420md.dll - MFHDF DLL

         c:\MyHDFstuff\HDF42r0\windows\bin\debug - 

            utilities, statically linked with the single-threaded
            libraries.

      When the release build is done the directories listed below will
      contain the following files:

         c:\MyHDFstuff\HDF42r0\windows\lib\release\singlethreaded - 
 
            hd420.lib - HDF static library 
            hm420.lib - MFHDF static library

         c:\MyHDFstuff\HDF42r0\windows\lib\release\multithreaded - 
 
            hd420m.lib - HDF multi-threaded DLL export library 
            hm420m.lib - MFHDF multi-threaded DLL export library
 
         c:\MyHDFstuff\HDF42r0\windows\dll\release 

            hd420m.dll - HDF DLL
            hm420m.dll - MFHDF DLL
 
         c:\MyHDFstuff\HDF42r0\Windows\bin\release - 
 
            utilities, statically linked with the single-threaded
            libraries.
 
Note: The ws2_32.lib needs to be linked with your executable if using
      the static mfhdf library.  The ws2_32.lib can be found in your
      Microsoft Visual C++ directory under the lib folder.

		
STEP IV: Testing the Build

In a command prompt window run the test batch file which resides in the
HDF42r0 directory to make sure that the libraries were built correctly.

DLLs listed below should be placed into the Windows system directory.
A batch file named install_dll.bat is included in c:\MyHDFstuff\hdf4
directory.  Run this batch file and the following HDF4 DLLs will be
copied to the system directory.

   HDF42r0\windows\dll\release\hd420m.dll
   HDF42r0\windows\dll\release\hm420m.dll
   HDF42r0\windows\dll\debug\hd420md.dll
   HDF42r0\windows\dll\debug\hm420md.dll

Then run Win32debugtst.bat to test debug version or Win32releasetst.bat
to test release version.  

We strongly suggest you to redirect your testing results into an output
file so that you can easily check the testing results.  You may use
either Notepad or WordPad or whatever other windows word processor to
check the results.  You should not find any FAILED marks in your output
files.
        

STEP V:  Installation

We provide a batch file for users to relocate all HDF4 libraries in one
folder.  The file is called installhdf4lib.bat under c:\MyHDFstuff\hdf4
directory.  Run the batch file, you may see a folder called hdf4lib
under c:\MyHDFstuff\hdf4.  
    
The <release> layout of <hdf4lib> should be:
    
   release\include   --  HDF4 header files
   release\bin       --  HDF4 static tool executables
   release\lib       --  HDF4 static libraries
   release\dll       --  HDF4 multi-threaded libraries and DLLs
       
You may also find the similar layout for the <debug>.

 
Section III.  

Building an Application Using the HDF4 Library - Some Helpful Pointers
======================================================================

If you are building an application that uses the HDF4 library, the
following locations will need to be specified for locating header files
and linking in the HDF libraries:
 
   <top-level HDF directory>\lib
   <top-level HDF directory>\dll
   <top-level HDF directory>\include

where <top-level HDF directory> may be
c:\MyHDFstuff\HDF42r0\hdf4lib\release or
c:\MyHDFstuff\HDF42r0\hdf4lib\debug

Copying DLLs to the directory(for example, Windows system directory)
where the application can find. 

Using Microsoft Visual C++ version 6.x:

Under Tools->Options, select the folder, Directories:
   Under "Show directories for", select "Include files".
   Add the following directories:
      c:<path to HDF includes>\include  

Under "Show directories for", select "Library files":
   Add the following directories:
      c:<path to HDF libs>\lib
      c:<path to HDF libs>\dll        

Under Project->Settings, select folder, Link:
   Add the following libraries to the beginning of the list of
   Object/Library Modules:
      hd420.lib hm420.lib (single-threaded release version)
      hd420d.lib hm420d.lib (single-threaded debug version)

      hd420m.lib hm420m.lib (multi-threaded release version)
      hd420md.lib hm420md.lib (multi-threaded debug version)


Section IV. How to Disable Szip Compression

Warning: When you modify the h4config.h file as described below,
         DO NOT just change the values of these macros from 1 to 0.
         Please DO remove(or comment out) appropriate lines.

If you would like to remove Szip compression from the HDF4 library,
follow the steps below.

   1. Open the H4config.h file from the c:\MyHDFstuff\HDF42r0\hdf\src
      directory and remove(or comment out) the following two lines: 

         #define H4_HAVE_LIBSZ 1
         #define H4_HAVE_SZLIB_H 1

      then save the file.
	
   2. Delete HDF4_EXT_SZIP environment variable if you have set it in
      preconditions.
   
   3. Run-compile HDF4 library according to section II.

      When you disable Szip, you may get the following message 
      when building HDF4 libraries:

      The following environment variables were not found
      $(HDF5_EXT_SZIP)

      This message can be ignored.

      When you run HDF4 testing batch file Win32debugtst.bat or
      Win32releasetst.bat, if you get the following failed messages:

         ============================
         HDF-SD C interfaces tests
         ============================
         *** HDF fails formatted test ***
         Comparing files hdfout.new and ..\..\MFHDF\LIBSRC\HDFOUT.SAV
         ***** hdfout.new
         9 := 0
         ****** SD Szip test skipped *****
         num_err == 0
         ***** ..\..\MFHDF\LIBSRC\HDFOUT.SAV
         9 := 0
         num_err == 0
         *****

      This means that actually the HDF-SD C interfaces tests passed.  It
      is because that the expected output file HDFOUT.SAV was generated
      for HDF4 testings with Szip compression feature.  As you choose
      not to use Szip compression feature in HDF4, SD Szip test should
      be skipped.
     

Section V. BUILD HDF in VS 7.0(.NET)    
============================================
We just briefly introduce you how to build HDF in VS 7.0(.NET);

1. Open the old dataspace(all.dsw) file with the "Open solution" option,
.NET will automatically convert the data space file to solution file.

2. Then find  "Build" and go to "Configuration Manager"; choose
"release" or "debug", then choose "build all".

3. If you want to change some project setting, select the project and
right click the button to choose Properties; find the similar menu
there as in 6.0.

4. You need to specify the Zlib, JPEG, and Szip include header files
and libraries under Tools->Options->Projects->VC++ Directories and
choose Include and Libraries under the category of
"show directories for" to add the corresponding path.

Note: Currently we only build and test .NET on windows XP.

MORE HELPFUL POINTERS
=====================
(as described in terms of installing the  nofortran configuration)

Here are some notes that may be of help if you are not familiar
with using the Visual C++ Development Environment.

Project name and location issues: 
         The files in Win32.zip  and Win32.nofortran.zip must end up 
         in the HDF42r0\ directory installed by HDF42r0s.zip

         If you must install all.dsw and all.dsp in 
         another directory, relative to HDF42r0\ , you will be asked to
	   locate all sub-project files, when you open the
	   project all.dsw.
	 
	   If you want to rename all (the entire project),
	   you will need to modify two files
	   all.dsw and all.dsp as text
	   (contrary to the explicit warnings in the files).

	   You can also modify all.dsw and all.dsp
	   as text, to allow these 2 files to be installed
	   in another directory.



  Settings... details:
  If you create your own project, the necessary settings can be
  read from the all.dsp file(as text), or from the
  Project Settings in the Developer Studio project settings 
  dialog.

    Project
	  Settings
	      C/C++
		  Category
		     PreProcessor
			 Code Generation
			    Use run-time Library
				   These are all set to use 
                                      Single-Threaded
				   or Single-Threaded debug
                                   or Multi-Threaded DLL 
                                   or Multi-Threaded debug DLL



