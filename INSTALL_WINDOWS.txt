      Installation Instructions for HDF4.2r1 on Windows 2000/XP
========================================================================

The instructions which follow assume that you will be using the HDF4
source code archive from HDF website (http://hdf.ncsa.uiuc.edu).

In building HDF4 from source code you may select between two build
environment options ( with Fortran or without Fortran).  

***************************WARNINGS*************************************
Please read CAREFULLY about the following preconditions first.

Preconditions

To build the HDF4 and MFHDF libraries ( single-threaded static or
multi-threaded DLL) and utilities, it is assumed that you have done
the following:
      
   1. Installed MicroSoft Visual Studio or Intel C compiler and WinZip.

      1.1 Installed DEC Visual Fortran compiler(6.0 or higher version)
          or Intel Fortran compiler if you want to build the full HDF4
          library with Fortran support.

   2. Set up a directory structure to unpack the source code archive.
      For example: 

         c:\                             (any drive)
         MyHDFstuff\                     (any folder name)

   3. Download the HDF4.2r1 source code archive HDF4.2r1.tar.gz from
      ftp://ftp.ncsa.uiuc.edu/HDF/HDF/HDF_Current/src/ and use WinZip
      to extract HDF4 source code into c:\MyHDFstuff.  This creates a 
      directory called 'HDF4.2r1' under MyHDFstuff which contains 
      several files and directories.  Rename "HDF4.2r1" to "HDF42r1".  

   4. HDF4 provides options to do in-memory compress within HDF4
      library.  Currently, three external compression libraries ZLIB,
      JPEG, and SZIP can be used with HDF4.

      4.1 HDF4 uses Zlib version 1.2.2 for compression.  To use Zlib
          library, you have to install your own Zlib DLL library or go
          to ftp://hdf.ncsa.uiuc.edu/lib-external/gzip/bin/windows 
          to download the Zlib library.

          Zlib compression feature inside HDF4 is required.

          Note: Zlib 1.2.2 DLL library can be downloaded from
          http://www.zlib.net/zlib122-dll.zip
      
      4.2 HDF4 uses JPEG release 6b for compression.  To use JPEG
          library, you have to install your own JPEG library or go to
          ftp://hdf.ncsa.uiuc.edu/lib-external/jpeg/bin to download
          the JPEG library archive file jpeg-6b.exe.

          JPEG compression feature inside HDF4 is required.

      4.3 HDF4 uses Szip version 2.0 for compression. To use Szip
          library, you can download Szlib source codes and binaries
          from ftp://ftp.ncsa.uiuc.edu/HDF/szip/bin/windows.

          Please note that Szip is not a totally open-source free
          software.  For licensing issue of Szip, please check 
          "Licensing terms" at
          http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/index.html.

          Szip compression feature inside HDF4 is optional. 
      
   5. Define the following environment variables: 

         HDF4_EXT_ZLIB
         HDF4_EXT_JPEG
         HDF4_EXT_SZIP
      
      In this section, Szip compression software is assumed to be used.
      Please read section IV as well as this section if you do not
      want to use Szip compression feature inside HDF4.
      
      To define these environment variables:
      
      Click "Start", click "Control Panel", and then double-click
      "System".  On the "Advanced" tab, click "Environment Variables".
      
      If you are logged on as administrator to the local computer AND
      want to let all other users use these three environment variables,
      click "New" under "System Variables" box; otherwise, click "New"
      under "User Variables" box.
      
      In the New Variable window, set "Variable name" as HDF4_EXT_ZLIB
      and "Variable value" as zdll.lib, then click OK.
      
      Similarly, you can set:

      HDF4_EXT_JPEG environment variable as libjpeg.lib
      HDF4_EXT_SZIP environment variable as szlibdll.lib

      Note: You might have to close and reopen running programs for the
            new environment variable settings to take effect. 
      
   6. Set up path for external libraries and headers
 
      Invoke Microsoft Visual C++ and go to "Tools" and select
      "Options", find "Directories";
      
      6.1 Find the box "Show directories for", choose "Include files",
          If you cannot find your Zlib, JPEG, and Szip header path
          (for example, c:\zlib122\include, c:\jpeg-6b, 
          c:\szip\include) from the directory list, add the header
          path (c:\zlib122\include, c:\jpeg-6b, c:\szip\include) to
          the included directories.
      
      6.2 Find the box "Show directories for", choose "Library files",
          If you cannot find your Zlib, JPEG, and Szip library path
          (for example, c:\zlib122\lib, c:\jpeg-6b, c:\szip\dll)
          from the directory list, add the library path
          (c:\zlib122\lib, c:\jpeg-6b, c:\szip\dll) to the library
          directories.

************************************************************************

The following sections discuss installation procedures in detail:

   Section I:    Build and Test HDF4 Libraries and Utilities
   Section II:   Build an Application Using the HDF4 Library
   Section III:  Build HDF4 in VS 7.0(.NET)
   Section IV:   Build HDF4 with Intel Compiler
   Section V:    Some Helpful Pointers
   Section VI:   Disable Szip Compression Feature inside HDF4
   Section VII:  Build and Test HDF4 Library on the Command Line

************************************************************************

      
Section I: Build and Test HDF4 Libraries and Utilities
======================================================================

Step 1: Select Installation Type

You may select one of 2 ways to build the HDF4 libraries and utilities,
depending on your environment and application needs.

Option A, (select Win32.nofortran.zip)
This is the "NOFORTRAN" configuration: It builds debug and release
single-threaded and multi-threaded DLL versions of the HDF libraries,
tests, and utilities.  There is no Fortran support.

Option B, (select Win32.zip)
This is "WITH FORTRAN SUPPORT" configuration: it is the same as above
but with Fortran support. 


Step 2: Build HDF4 Libraries and Utilities

Note:
     (1) The instructions are the same for both Options A and B.

     (2) These instuctions are written for MicroSoft Visual Studio 6.0
         and DEC Visual Fortran users.  For .NET users, please read
         section III.  For Intel compiler users, please read section IV. 

     (3) For Microsoft Visual C++ 6.0 and Visual Fortran 6.0(or higher
         versions) users, we support building HDF4 libraries and
         utilities from the HDF4 source code archive on command line.
         To build HDF4 on the command line, please read section VII.

   1. Unpack Win32.nofortran.zip or Win32.zip in directory HDF42r1\. 

      Note: Please select "Yes" or "Yes to All" when you are asked
            to confirm file overwrite by WinZip.

   2. Invoke Microsoft Visual C++ 6.0, go to "File" and select the
      "Open Workspace" option. 

      Then open the c:\MyHDFstuff\HDF42r1\all.dsw workspace. 

   3. Select "Build", then Select "Set Active Configuration".

      On Windows platform select as the active configuration

         "all -- Win32 Debug" to build debug versions of
                              single-threaded static libraries, tests
                              and utilities and multi-threaded libraries
                              and tests.
         or
 
         "all -- Win32 Release" to build release versions of
                                single-threaded static libraries, tests
                                and utilities and multi-threaded
                                libraries and tests.

      Select "Build" and "Build all.exe" to build the corresponding
      version of the HDF42r1 library.

      You should see 0 error at the end of building.

      Warning messages can be ignored.

      When the debug build is done the directories listed below will
      contain the following files:

         c:\MyHDFstuff\HDF42r1\windows\lib\debug\singlethreaded -

            hd421d.lib - HDF static library 
            hm421d.lib - MFHDF static library

         c:\MyHDFstuff\HDF42r1\windows\lib\debug\multithreaded -

            hd421md.lib - HDF multi-threaded DLL export library 
            hm421md.lib - MFHDF multi-threaded DLL export library 

         c:\MyHDFstuff\HDF42r1\windows\dll\debug

            hd421md.dll - HDF DLL
            hm421md.dll - MFHDF DLL

         c:\MyHDFstuff\HDF42r1\windows\bin\debug - 

            utilities, statically linked with the single-threaded
            libraries.

      When the release build is done the directories listed below will
      contain the following files:

         c:\MyHDFstuff\HDF42r1\windows\lib\release\singlethreaded - 
 
            hd421.lib - HDF static library 
            hm421.lib - MFHDF static library

         c:\MyHDFstuff\HDF42r1\windows\lib\release\multithreaded - 
 
            hd421m.lib - HDF multi-threaded DLL export library 
            hm421m.lib - MFHDF multi-threaded DLL export library
 
         c:\MyHDFstuff\HDF42r1\windows\dll\release 

            hd421m.dll - HDF DLL
            hm421m.dll - MFHDF DLL
 
         c:\MyHDFstuff\HDF42r1\Windows\bin\release - 
 
            utilities, statically linked with the single-threaded
            libraries.
 
Note: The ws2_32.lib needs to be linked with your executable if using
      the static mfhdf library.  The ws2_32.lib can be found in your
      Microsoft Visual C++ directory under the lib folder.

		
Step 3: Test HDF4 Libraries and Utilities

HDF4 libraries and utilities should be tested to make sure that they
were built correctly.

We provide 2 options for users to test HDF4 libraries and utilities.  

   Option 1: Automatic testings

   HDF4 comes with various test suites, all of which can be tested
   with hdf4check.bat batch file in c:\MyHDFstuff\HDF42r1\ directory.

   Invoke a command prompt window and run hdf4check.bat.

   Test results are saved in:

      c:\MyHDFstuff\HDF42r1\check_results.txt.

   Use either Notepad or WordPad or whatever other windows word
   processor to check the results.  You should not find any FAILED
   marks in check_results.txt.

   Option 2: Step-by-step HDF4 libraries and utilities testings

   You can also test debug and release versions of HDF4 libraries
   and utilities separately.

   DLLs listed below should be placed into the Windows system directory.
   A batch file named install_dll.bat is included in
   c:\MyHDFstuff\HDF42r1 directory.  Run this batch file and the
   following HDF4 DLLs will be copied to the system directory.

      HDF42r1\windows\dll\release\hd421m.dll
      HDF42r1\windows\dll\release\hm421m.dll
      HDF42r1\windows\dll\debug\hd421md.dll
      HDF42r1\windows\dll\debug\hm421md.dll

   Then run Win32debugtst.bat to test debug version or
   Win32releasetst.bat to test release version.  

   We strongly suggest you to redirect your testing results into an
   output file so that you can easily check the testing results.  You
   may use either Notepad or WordPad or whatever other windows word
   processor to check the results.  You should not find any FAILED
   marks in your output files.
        

Step 4: ncgen -c test (Optional)

ncgen is a netCDF utility that converts a CDL description of a netCDF
file into an HDF file, or that generates the C or Fortran source
code required to create the netCDF file.

"ncgen -c test" is used to test whether ncgen can generate the C
source code required to create the netCDF file.

Note:
     Currently, ncgen can not generate the Fortran source code
     required to create the netCDF file on Windows.
  
     So "ncgen -f test" is not supported on Windows.
 
ncgen project should have been built in step 2 before you can run
"ncgen -c test" on Windows.

Follow the instructions below to run "ncgen -c test" on Windows.

   1. Open all.dsw Workspace

      Invoke Microsoft Visual C++ 6.0, go to "File" and select the
      "Open Workspace" option. 

      Then open the c:\MyHDFstuff\HDF42r1\all.dsw workspace. 

   2. Manually generate test0.c

      A batch file named ctest0_gen.bat under c:\MyHDFstuff\HDF42r1\
      directory is provided to create the C souce code test0.c.

      ctest0_gen.bat has 2 options:

         ctest0_gen debug    -- generate test0.c with debug ncgen 

         ctest0_gen release  -- generate test0.c with release ncgen

      Invoke a command prompt windows and run ctest0_gen.bat with
      appropriate options, you should get test0.c under
      c:\MyHDFstuff\HDF42r1\mfhdf directory.

   Note: We suggest that users should use the test0.c generated by
         debug version ncgen (by running ctest0_gen debug) to build
         the debug version ctest0.exe.

         Similarly, test0.c generated by release version ncgen (by
         running ctest0_gen release) should be used to build the
         release version ctest0.exe.

   3. Build ctest0.exe

      Select "Build", then Select "Set Active Configuration".

      On Windows platform select as the active configuration

         "ctest0 -- Win32 Debug" to build debug versions ctest0

         or
 
         "ctest0 -- Win32 Release" to build release versions of ctest0


      Select "Build ctest0.exe" to build the corresponding version of
      ctest0.exe.

      You should see 0 error at the end of building.

      Warning messages can be ignored.

      When the debug build is done the directories listed below will
      contain the following files:

         c:\MyHDFstuff\HDF42r1\windows\bin\debug

               ctest0.exe - Debug version

         c:\MyHDFstuff\HDF42r1\windows\bin\debug

               ctest0.exe - Release version

   4. Run ncgen -c Test

      A batch file named ncgen_ctest.bat under c:\MyHDFstuff\HDF42r1\
      is provided to run "ncgen -c test".

      ncgen_ctest.bat has 2 options:

         ncgen_ctest debug    -- debug version ncgen -c test 

         ncgen_ctest release  -- release version ncgen -c test

      Invoke a command prompt windows and run ncgen_ctest.bat with
      appropriate options, you should get the following messages:

         =========================
         ncgen -c test
         =========================
         *** ncgen -c test successful ***


Step 5:  Install HDF4 Library

We provide a batch file for users to relocate all HDF4 libraries in one
folder.  The file is called installhdf4lib.bat under
c:\MyHDFstuff\HDF42r1 directory.  Run the batch file, you may see a
folder called hdf4lib under c:\MyHDFstuff\HDF42r1.  
    
The <release> layout of <hdf4lib> should be:
    
   release\include   --  HDF4 header files
   release\bin       --  HDF4 static utility executables
   release\lib       --  HDF4 static libraries
   release\dll       --  HDF4 multi-threaded libraries and DLLs
       
You may also find the similar layout for the <debug>.


STEP 6: Building HDF4 C/Fortran examples (Optional)

Simple examples have been provided for users to test HDF4 C/Fortran
library and utilities.

Note: 
      To build HDF4 Fortran examples, Win32.zip must have been
      chosen in step 1.

To build and test HDF4 C examples:

   1. Invoke Microsoft Visual Studio 6.0, go to "File" and select
      the "Open Workspace" option. 
      
      Then open the workspace
      c:\MyHDFstuff\HDF42r1\examples\allexamples\allexamples.dsw.

   2. Select "Build", then Select "Set Active Configuration".

      In "Project configurations", select the active configuration

          "allexamples -- Win32 Debug" to build debug versions of the
                                       C examples.

                          or
	
          "allexamples -- Win32 Release" to build release versions the 
                                         C examples.

      When the debug build or release build is done, there should be the 
      following subdirectories in c:\MyHDFstuff\HDF42r1\examples\

          chgnamtest
          createtest
          dimtest
          gittest
          rattrtest
          readtest 
          sattrest 
          sds2grouptest
          sh_dimtest
          unltest

   3. Invoke a command prompt window and run the batch file 
      InstallExamples.bat which resides in the top level directory
      (c:\MyHDFstuff\HDF42r1\).  This file creates 2 new directories, 
      examplesREL and examplesDBG in the c:\MyHDFstuff\HDF42r1\examples
      directory and places all the executables in it.  Both the release
      and debug versions of the examples should be built before this
      step is done.  The examples should be tested in these 2 new
      directories due to some dependencies between the examples.
      Especially createtest.exe should be executed before gitest.exe
      and sattrtest.exe, and rattrtest should be executed immediately
      after sattrtest.exe due to the dependencies among these files.

To build and test HDF4 Fortran example:

   1. Invoke Compaq Visual Fortran or intel Fortran under Microsoft 
      Visual Studio development environment, go to "File" and select
      the "Open Workspace" option.

      Then open the workspace
      c:\MyHDFstuff\HDF42r1\fortran\examples\allf90examples\allf90examples.dsw.

   2. Select "Build", then Select "Set Active Configuration".

      In "Project configurations", select the active configuration

          "allf90examples -- Win32 Debug" to build debug versions of the
                                          Fortran examples.

                             or
	
          "allf90examples -- Win32 Release" to build release versions the 
                                            Fortran examples.

      When the debug build or release build is done, there should be the 
      following subdirectories in c:\MyHDFstuff\HDF42r1\fortran\examples\

          createtest
          gittest
          rattrtest
          readtest 
          sattrest 
          sds2grouptest
          sh_dimtest
          unltest

   3. Invoke a command prompt window and run the batch file 
      Installf90Examples.bat which resides in the top level directory
      (c:\MyHDFstuff\HDF42r1\).  This file creates 2 new directories, 
      f90examplesREL and f90examplesDBG in the
      c:\MyHDFstuff\HDF42r1\fortran\examples directory and places all
      the executables in it.  Both the release and debug versions of
      the examples should be built before this step is done.  The
      examples should be tested in these 2 new directories due to
      some dependencies between the examples.  Especially createtest.exe
      should be executed before gitest.exe and sattrtest.exe, and
      rattrtest should be executed immediately after sattrtest.exe due
      to the dependencies among these files.

 
Section II. Build an Application Using the HDF4 Library or DLLs
======================================================================

If you are building an application that uses the HDF4 library, the
following locations will need to be specified for locating header files
and linking in the HDF4 libraries:
 
   <top-level HDF directory>\lib
   <top-level HDF directory>\dll
   <top-level HDF directory>\include

where <top-level HDF directory> may be
c:\MyHDFstuff\HDF42r1\hdf4lib\release or
c:\MyHDFstuff\HDF42r1\hdf4lib\debug

if you have installed HDF4 library in Section I, Step 5.

We assume that you will use the Szip compression with HDF4 library.

To specify these locations in the settings for your VC++ project with
Microsoft Visual C++ 6.0:

Under Tools->Options, select the folder, Directories:
   Under "Show directories for", select "Include files".
   Add the following directories:
      c:<path to HDF includes>\include  

Under "Show directories for", select "Library files":
   Add the following directories:
      c:<path to HDF libs>\lib
      c:<path to HDF libs>\dll

Under Project->Settings, select folder, Link:
   Add the following libraries to the beginning of the list of
   Object/Library Modules:
      hd421.lib hm421.lib (single-threaded release version)
      hd421d.lib hm421d.lib (single-threaded debug version)

      hd421m.lib hm421m.lib (multi-threaded release version)
      hd421md.lib hm421md.lib (multi-threaded debug version)

      HDF4_EXT_ZLIB
      HDF4_EXT_JPEG
      HDF4_EXT_SZIP

Note: The above three environment variables should have been defined in
      the preconditions.  Paths for these external libraries and
      headers should also have been set up in preconditions.

      Follow the instructions in preconditions to define these three
      environment variables and set up path for these external libraries
      and headers if you can not find them.

HDF4 DLLs should also be copied to the directory(for example,
Windows system directory) where the application can find. 


Note: You can also follow the above instructions in this section if
      want to build an application using the HDF42r1 binary
      distributions available from
      ftp://ftp.ncsa.uiuc.edu/HDF/HDF/HDF_Current/bin/windows.

      Make sure to download appropriate binary distribution based on
      your Windows platforms and compilers.

      If you can not find the binary distribution matching with your
      Windows platforms and compilers, you will have to build HDF4
      libraries and utilities from the source code.

      Also, these binary distributions were pre-compiled with Szip
      compression feature inside HDF4 library.  If you do not want
      to use the Szip compression feature, you will have to build HDF4
      libraries and utilities from the source code following the
      instructions in Section VI.
     

Section III. Build HDF4 in VS 7.0(.NET)    
======================================================================

We just briefly introduce you how to build HDF4 in VS 7.0(.NET);

1. Open the old dataspace(all.dsw) file with the "Open solution" option,
.NET will automatically convert the data space file to solution file.

2. Then find  "Build" and go to "Configuration Manager"; choose
"release" or "debug", then choose "build all".

3. If you want to change some project setting, select the project and
right click the button to choose Properties; find the similar menu
there as in 6.0.

4. You need to specify the Zlib, JPEG, and Szip include header files
and libraries under Tools->Options->Projects->VC++ Directories and
choose Include and Libraries under the category of
"show directories for" to add the corresponding path.

Note: Currently we only build and test .NET on windows XP.


Section IV. Build HDF4 with Intel Compiler    
======================================================================
(Note: Building HDF4 with Intel 7.1 will be added by Kent
       and Xuan will add instructions for Intel 8.1 if we can make it
       work.)


Section V: Some Helpful Pointers
======================================================================

(as described in terms of installing the nofortran configuration)

Here are some notes that may be of help if you are not familiar
with using the Visual C++ Development Environment.

Project name and location issues: 

   The files in Win32.zip  and Win32.nofortran.zip must end up in the
   HDF42r1\ directory installed by HDF4.2r1.tar.gz.

   If you must install all.dsw and all.dsp in another directory,
   relative to HDF42r1\ , you will be asked to locate all sub-project
   files, when you open the project all.dsw.
	 
   If you want to rename all (the entire project), you will need to
   modify two files all.dsw and all.dsp as text (contrary to the
   explicit warnings in the files).

   You can also modify all.dsw and all.dsp as text, to allow these 2
   files to be installed in another directory.

Settings... details:
   If you create your own project, the necessary settings can be
   read from the all.dsp file(as text), or from the Project Settings
   in the Developer Studio project settings dialog.


   Project
      Settings
         C/C++
            Category
               Code Generation
                  Use run-time Library
                     These are all set to use Single-Threaded
                                           or Single-Threaded debug
                                           or Multi-Threaded DLL
                                           or Multi-Threaded debug DLL


Section VI. Disable Szip Compression Feature inside HDF4
======================================================================

Warning: When you modify the h4config.h file as described below,
         DO NOT just change the values of these macros from 1 to 0.
         Please DO remove(or comment out) appropriate lines.

If you would like to remove Szip compression from the HDF4 library,
follow the steps below.

   1. Open the H4config.h file from the c:\MyHDFstuff\HDF42r1\hdf\src
      directory and remove(or comment out) the following two lines: 

         #define H4_HAVE_LIBSZ 1
         #define H4_HAVE_SZLIB_H 1

      then save the file.
	
   2. Delete HDF4_EXT_SZIP environment variable if you have set it in
      preconditions.
   
   3. Run-compile HDF4 library according to section I.

      When you disable Szip, you may get the following message 
      when building HDF4 libraries:

      The following environment variables were not found
      $(HDF4_EXT_SZIP)

      This message can be ignored.

      When you run HDF4 testing batch file Win32debugtst.bat or
      Win32releasetst.bat, you should get the following failed messages
      for HDF-SD c interfaces tests:

         ============================
         HDF-SD C interfaces tests
         ============================
         *** HDF fails formatted test ***
         Comparing files hdfout.new and ..\..\MFHDF\LIBSRC\HDFOUT.SAV
         ***** hdfout.new
         9 := 0
         ****** SD Szip test skipped *****
         num_err == 0
         ***** ..\..\MFHDF\LIBSRC\HDFOUT.SAV
         9 := 0
         num_err == 0
         *****

      This means that actually the HDF-SD C interfaces tests passed.
      The expected output file HDFOUT.SAV was generated for HDF4
      testings with Szip compression feature.  As you disabled the
      Szip compression feature in HDF4, SD Szip test should be skipped.


Section VII. Build and Test HDF4 Library on the Command Line    
======================================================================

For Microsoft Visual C++ 6.0 and DEC Visual Fortran 6.0(or higher
versions) users, we support building HDF4 libraries and utilities from
the HDF4 source code archive on command line.
      
For all other Windows development tools, HDF4 should be built in the
development environment following the instructions in Section I.

Step 1. Set path for Microsoft Visual C++ 6.0 and Visual Fortran 6.0
        (or higher version):
   
   Open "System" in Control Panel.
   
   On the "Advanced" tab, click "Environment Variables", click "Path"
   in the "System variables" box, then click "Edit" and add your Visual
   C++ 6.0 path (For example, 
   C:\Program Files\Microsoft Visual Studio\Common\MSDev98\Bin\)
   and Visual Fortran 6.0 path (For example, 
   C:\Program Files\Microsoft Visual Studio\Common\MSDev98\Bin\)
   into "Variable Value" and click "OK".
  
Step 2. Unpack Win32.nofortran.zip or Win32.zip

   Unpack Win32.nofortran.zip or Win32.zip with WinZip into HDF42r1\
   directory. 

   Note: Please select "Yes" or "Yes to All" when you are asked
         to confirm file overwrite by WinZip.

Step 3. Build and Test

   We provide 2 options for users to build test HDF4 libraries 
   and utilities.
      
   Options A: Build and test in one step 
      
      A batch file named hdf4bt.bat in c:\MyHDFstuff\HDF42r1 directory
      is provided for users to build and test HDF4 library and tools
      together from the command line.

      Run hdf4bt.bat in a command prompt window.

      Test results are saved in

         c:\MyHDFstuff\HDF42r1\hdf4_results.txt   


   Options B: Build and test in two steps 

      We also provide users with the option to build and test HDF4
      libraries and utilities separately from the command line.
   
      Step 1) Build HDF4 Libraries and Utilities

         A batch file named hdf4build.bat in c:\MyHDFstuff\HDF42r1 
         directory is provided for users to build HDF4 libraries and 
         utilities from command line.

         Run hdf4build.bat in a command prompt window.

         Compiling outputs are saved in

            c:\MyHDFstuff\HDF42r1\build_results.txt.

         You can check the output file to find out whether there
         are any compilation errors.

      Step 2) Test HDF4 Libraries and Utilities
   
         A batch file named hdf4check.bat in c:\MyHDFstuff\HDF42r1
         directory is provided for users to test HDF4 libraries and 
         utilities from command line.

         Run hdf4check.bat in a command prompt window.

         Test results are saved in:

            c:\MyHDFstuff\HDF42r1\check_results.txt.


Having built and tested HDF4 libraries and utilities successfully 
on the command line, you can install HDF4 libraries following the
instruction in Section I, Step 4.


Please send email to hdfhelp@ncsa.uiuc.edu for further assistance.