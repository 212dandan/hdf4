.\" WARNING! THIS FILE WAS GENERATED AUTOMATICALLY BY c2man!
.\" DO NOT EDIT! CHANGES MADE TO THIS FILE WILL BE LOST!
.TH "mfhdf" 3 "15 October 1996" "c2man mfhdf.h"
.SH "NAME"
SDsetchunk,
SDgetchunkinfo,
SDwritechunk,
SDreadchunk,
SDsetchunkcache \- SDS Chunking Routines
.SH "SYNOPSIS"
.ft B
#include <mfhdf.h>
.sp
extern intn SDsetchunk
.br
(
.br
	int32 sdsid,
.br
	HDF_CHUNK_DEF chunk_def,
.br
	int32 flags
.br
);
.sp
extern intn SDgetchunkinfo
.br
(
.br
	int32 sdsid,
.br
	HDF_CHUNK_DEF *chunk_def,
.br
	int32 *flags
.br
);
.sp
extern intn SDwritechunk
.br
(
.br
	int32 sdsid,
.br
	int32 *origin,
.br
	const VOID *datap
.br
);
.sp
extern intn SDreadchunk
.br
(
.br
	int32 sdsid,
.br
	int32 *origin,
.br
	VOID *datap
.br
);
.sp
extern intn SDsetchunkcache
.br
(
.br
	int32 sdsid,
.br
	int32 maxcache,
.br
	int32 flags
.br
);
.ft R
.SH "PARAMETERS"
.TP
.B "int32 sdsid"
IN: sds access id.
.TP
.B "HDF_CHUNK_DEF chunk_def"
IN: chunk definition.
.TP
.BR "int32 flags" "	(SDsetchunk)"
IN: flags.
.TP
.B "HDF_CHUNK_DEF *chunk_def"
IN/OUT: chunk definition.
.TP
.B "int32 *flags"
IN/OUT: flags.
.TP
.BR "int32 *origin" "	(SDwritechunk)"
IN: origin of chunk to write.
.TP
.B "const VOID *datap"
IN: buffer for data.
.TP
.BR "int32 *origin" "	(SDreadchunk)"
IN: origin of chunk to read.
.TP
.B "VOID *datap"
IN/OUT: buffer for data.
.TP
.B "int32 maxcache"
IN: max number of chunks to cache.
.TP
.BR "int32 flags" "	(SDsetchunkcache)"
IN: flags = 0, HDF_CACHEALL.
.SH "DESCRIPTION"
.SS "SDsetchunk"
This routine makes the SDS a chunked SDS according to the chunk
definition passed in.

The dataset currently cannot be special already i.e. NBIT,
COMPRESSED, or EXTERNAL. This is an Error.

The defintion of the "HDF_CHUNK_DEF" union with relvant fields is:
.nf

typedef union hdf_chunk_def_u
{
int32  chunk_lengths[MAX_VAR_DIMS];  Chunk lengths along 
                                      each dimension.
       {
         int32 chunk_lengths[MAX_VAR_DIMS]; Chunk lengths along 
                                            each dimension.
         int32 comp_type;                   Compression type
         comp_info cinfo;                   Compression info struct
       }comp;
} HDF_CHUNK_DEF
.fi

The simplist is the "chunk_lengths" array specifiying chunk
lengths for each dimension where the "flags" argument set 
to "HDF_CHUNK";

COMPRESSION is set by using the "HDF_CHUNK_DEF" structure to set the
appropriate compression information along with the required chunk lengths
for each dimension. The compression information is the same as
that set in "SDsetcompress()". The bit-or'd "flags" argument' is set 
to "HDF_CHUNK | HDF_COMP".

See the example in pseudo-C below for further usage.

The maximum number of Chunks in an HDF file is 65,535.

The dataset currently cannot have an UNLIMITED dimension.

The performance of the SDxxx interface with chunking is greatly
affected by the users access pattern over the dataset and by
the maximum number of chunks set in the chunk cache. The cache contains
the Least Recently Used(LRU cache replacment policy) chunks. See the
routine SDsetchunkcache() for further info on the chunk cache and how
to set the maximum number of chunks in the chunk cache. A default chunk
cache is always created.

The following example shows the organization of chunks for a 2D array.
E.g. 4x4 array with 2x2 chunks. The array shows the layout of
chunks in the chunk array.
.nf

    4 ---------------------
      |         |         |
Y     |  (0,1)  |  (1,1)  |
^     |         |         |
|   2 ---------------------
|     |         |         |
|     |  (0,0)  |  (1,0)  |
|     |         |         |
|     ---------------------
|     0         2         4
---------------> X

 --Without compression--:
{
 HDF_CHUNK_DEF chunk_def;
 .......
 -- Set chunk lengths --
 chunk_def.chunk_lengths[0]= 2;
 chunk_def.chunk_lengths[1]= 2;

 -- Set Chunking --
 SDsetchunk(sdsid, chunk_def, HDF_CHUNK);
 ......
}

 --With compression--:
{
 HDF_CHUNK_DEF chunk_def;
 .......
 -- Set chunk lengths first --
 chunk_def.chunk_lengths[0]= 2;
 chunk_def.chunk_lengths[1]= 2;

 -- Set compression --
 chunk_def.comp.cinfo.deflate.level = 9;
 chunk_def.comp.comp_type = COMP_CODE_DEFLATE;
 -- Set Chunking with Compression --
 SDsetchunk(sdsid, chunk_def, HDF_CHUNK | HDF_COMP);
 ......
}.
.fi

.SS "SDgetchunkinfo"
This routine gets any special information on the SDS. If its chunked,
chunked and compressed or just a regular SDS. Currently it will only
fill the array of chunk lengths for each dimension as specified in
the "HDF_CHUNK_DEF" union. It does not tell you the type of compression
or the compression parameters used. You can pass in a NULL for "chunk_def"
if don't want the chunk lengths for each dimension.
Additionaly if successfull it will return a bit-or'd value in "flags"
indicating if the SDS is:
.nf

       Chunked                  -> flags = HDF_CHUNK
       Chunked and compressed   -> flags = HDF_CHUNK | HDF_COMP
       Non-chunked              -> flags = HDF_NONE

e.g. 4x4 array - Pseudo-C
{
 int32   rcdims[3];
 HDF_CHUNK_DEF rchunk_def;
 int32   cflags;
 ...
 rchunk_def.chunk_lengths = rcdims;
 SDgetchunkinfo(sdsid, &rchunk_def, &cflags);
 ...
}.
.fi
.SS "SDwritechunk"
This routine writes a whole chunk of data to the chunked SDS
specified by chunk "origin" for the given SDS and can be used
instead of SDwritedata() when this information is known. This
routine has less overhead and is much faster than using SDwritedata().

Origin specifies the co-ordinates of the chunk according to the chunk
position in the overall chunk array.

Note that "datap" must point to a whole chunk of data.

See SDsetchunk() for a description of the organization of chunks in an SDS.

.SS "SDreadchunk"
This routine reads a whole chunk of data from the chunked SDS
specified by chunk "origin" for the given SDS and can be used
instead of SDreaddata() when this information is known. This
routine has less overhead and is much faster than using SDreaddata().

Origin specifies the co-ordinates of the chunk according to the chunk
position in the overall chunk array.

Note that "datap" must point to a whole chunk of data.

See SDsetchunk() for a description of the organization of chunks in an SDS.

.SS "SDsetchunkcache"
Set the maximum number of chunks to cache.

The cache contains the Least Recently Used(LRU cache replacment policy)
chunks. This routine allows the setting of maximum number of chunks that
can be cached, "maxcache".

The performance of the SDxxx interface with chunking is greatly
affected by the users access pattern over the dataset and by
the maximum number of chunks set in the chunk cache. The number chunks
that can be set in the cache is process memory limited. It is a good
idea to always set the maximum number of chunks in the cache as the
default heuristic does not take into account the memory available for
the application.

By default when the SDS is promoted to a chunked element the
maximum number of chunks in the cache "maxcache" is set to the number of
chunks along the last dimension.

The values set here affects the current object's caching behaviour.

If the chunk cache is full and "maxcache" is greater then the
current "maxcache" value, then the chunk cache is reset to the 
new "maxcache" value, else the chunk cache remains at the 
current "maxcache" value.

If the chunk cache is not full, then the chunk cache is set to the
new "maxcache" value only if the new "maxcache" value is greater than the
current number of chunks in the cache.

Use flags argument of "HDF_CACHEALL" if the whole object is to be cached
in memory, otherwise pass in zero(0). Currently you can only
pass in zero.

See SDsetchunk() for a description of the organization of chunks in an SDS.
.SH "RETURNS"
.SS "SDsetchunk"
SUCCEED/FAIL.
.SS "SDgetchunkinfo"
SUCCEED/FAIL.
.SS "SDwritechunk"
SUCCEED/FAIL.
.SS "SDreadchunk"
SUCCEED/FAIL.
.SS "SDsetchunkcache"
Returns the 'maxcache' value for the chunk cache if successful
and FAIL otherwise.
.SH "NAME"
.SS "SDsetchunk"
SDsetchunk   -- make SDS a chunked SDS.
.SS "SDgetchunkinfo"
SDgetchunkinfo -- get Info on SDS.
.SS "SDwritechunk"
SDwritechunk  -- write the specified chunk to the SDS.
.SS "SDreadchunk"
SDreadchunk   -- read the specified chunk to the SDS.
.SS "SDsetchunkcache"
SDsetchunkcache -- maximum number of chunks to cache.


